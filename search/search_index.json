{
    "docs": [
        {
            "location": "/",
            "text": "L'Archivio del Teatro Stabile di Torino\n\n\nDocumentazione\n\n\n\n\n\nDocumentazione dell'Archivio del Teatro Stabile di Torino\n\n\n\nL'archivio storico di torino \u00e8 un sito web che permette la ricerca e visione dei progetti portati avanti nel corso degli anni da Teatro Stabile di torino.  \n\n\n\n\n\nAll'interno del suo archivio si potranno trovare numerose opere, corredate di immagini e video, manifesti e locandine, rassegne e comunicati stampa, copioni,periodici, programmi e produzioni ordinate secondo stagioni, autore...\n\n\n\n\n\n\nVai all'\nARCHIVIO STORICO\n.\n\n\n\n\nVuoi sapere che cos'\u00e8 una documentazione e a che cosa serve? \n\n\n\nGuarda: \nCOS'\u00c8 UNA DOCUMENTAZIONE",
            "title": "Home"
        },
        {
            "location": "/#larchivio-del-teatro-stabile-di-torino",
            "text": "",
            "title": "L'Archivio del Teatro Stabile di Torino"
        },
        {
            "location": "/#documentazione",
            "text": "",
            "title": "Documentazione"
        },
        {
            "location": "/#documentazione-dellarchivio-del-teatro-stabile-di-torino",
            "text": "L'archivio storico di torino \u00e8 un sito web che permette la ricerca e visione dei progetti portati avanti nel corso degli anni da Teatro Stabile di torino.    \nAll'interno del suo archivio si potranno trovare numerose opere, corredate di immagini e video, manifesti e locandine, rassegne e comunicati stampa, copioni,periodici, programmi e produzioni ordinate secondo stagioni, autore...",
            "title": "Documentazione dell'Archivio del Teatro Stabile di Torino"
        },
        {
            "location": "/dettaglio/",
            "text": "Dettaglio (_table)\n\n\n\n\n\nDescrizione generale\n\n\nLa pagina \u201c_table\u201d \u00e8 la pagina di dettaglio di un elemento selezionato, sia dall\u2019\nArchivio\n, sia dalla \nBiblioteca\n. \n\nMostra il nome e il tipo dell\u2019elemento selezionato, come titolo, una o pi\u00f9 immagini (gallery), una descrizione, i documenti e gli elementi collegati (autore, spettacoli\u2026) e, per gli spettacoli, mostra una locandina dello spettacolo al posto della gallery.  \n\n\nComportamenti specifici\n\n\nLa pagina \u00e8 composta dall\u2019unione dei componenti: \ndetail\n e \nspettacoli-view\n.  \n\n\nimport AuiDetail from '~/components/detail/detail.vue'\nimport AuiDetailSpettacoli from '~/components/detail/spettacoli-view/spettacoli-view.vue'\n\n\n\n\n\n\nEsegue la funzione \nasyncData\n che permette di gestire le operazioni asincrone prima di impostare i dati del componente.\n\nRecupera i dati del componente \ndetail\n, aspettando finch\u00e9 non vengono mandate allo \nstore\n le azioni del metodo \ngetDetail()\n del componente e li restituisce passandoli alla variabile \ndetail\n.\n\nAssegner\u00e0 alle propriet\u00e0 \nid\n e \ntable\n le corrispondenti propriet\u00e0 di ciascun parametro in input.  \n\n\nasync asyncData ({store, params, error}) {\n    let detail = await store.dispatch('detail/getDetail', {\n        id: params.id,\n        table: util.getTable(params.table)\n    }) \n}\n\n\n\n\n\n\nControlla, se non ci sono metadati in \ndetail\n mostra il messaggio d\u2019errore: \u201c\nDati non trovati\n\u201d.  \n\n\nif (!detail) {\n    error ({statusCode: 404, message: 'Dati non trovati'})\n    return\n}\n\n\n\n\n\n\nRecupera i dati del componente \ndetail\n, aspettando finch\u00e9 non vengono mandate allo \nstore\n le azioni del metodo \ngetRelated()\n del componente e li restituisce passandoli alla variabile \nrelateds\n.\n\nAssegna alle propriet\u00e0 \ntable\n e \nid\n, rispettivamente, il table e l\u2019id del componente \ndetail\n.  \n\n\nlet relateds = await store.dispatch('detail/getRelateds', {\n    table: detail.table,\n    id: detail.id\n})\n\n\n\n\n\n\ndetail.category = util.getCategory(detail.table, detail.type_id)\nreturn{\n    detail, relateds\n}\n\n\n\n\n\n\n\nImposta come titolo della pagina il titolo dell\u2019elemento selezionato e, prende l\u2019URL della prima immagine della sua gallery e la usa per lo sfondo del titolo.  \n\n\nhead () {\n return{\n    title: this.detail.preferred_label,\n    meta: [\n    {\n        'hid': 'og:title',\n        'property': 'og:title',\n        'content': this.detail.preferred_label\n    },\n    {\n        'hid': 'og:image',\n        'property': 'og:image',\n        'content': _.get(this.detail, 'primaryImg.url.mediumlarge')\n    }\n   ]\n }\n}",
            "title": "Dettaglio (_table)"
        },
        {
            "location": "/dettaglio/#dettaglio-_table",
            "text": "",
            "title": "Dettaglio (_table)"
        },
        {
            "location": "/dettaglio/#descrizione-generale",
            "text": "La pagina \u201c_table\u201d \u00e8 la pagina di dettaglio di un elemento selezionato, sia dall\u2019 Archivio , sia dalla  Biblioteca .  \nMostra il nome e il tipo dell\u2019elemento selezionato, come titolo, una o pi\u00f9 immagini (gallery), una descrizione, i documenti e gli elementi collegati (autore, spettacoli\u2026) e, per gli spettacoli, mostra una locandina dello spettacolo al posto della gallery.",
            "title": "Descrizione generale"
        },
        {
            "location": "/dettaglio/#comportamenti-specifici",
            "text": "La pagina \u00e8 composta dall\u2019unione dei componenti:  detail  e  spettacoli-view .    import AuiDetail from '~/components/detail/detail.vue'\nimport AuiDetailSpettacoli from '~/components/detail/spettacoli-view/spettacoli-view.vue'",
            "title": "Comportamenti specifici"
        },
        {
            "location": "/cercapg/",
            "text": "Cerca\n\n\n\n\n\nDescrizione generale\n\n\nLa pagina \u201ccerca\u201d \u00e8 la pagina in cui vengono visualizzati gli elementi della ricerca effettuata.\n\nPermette di ricercare manualmente degli elementi, attraverso una barra di ricerca e, attraverso l\u2019utilizzo di filtri, di scremare ulteriormente la ricerca, sia dalla parte dell\u2019\nArchivio\n, sia da quella della \nBiblioteca\n (2 tipologie di filtri differenti).\n\n\u00c8 possibile, inoltre, visualizzare i risultati della ricerca secondo diversi tipi d\u2019ordine: \u201c\nA-Z\n\u201d, \u201c\nZ-A\n\u201d, \u201c\nPi\u00f9 recente\n\u201d e \u201c\nMeno recente\n\u201d e se visualizzarli in formato \ngriglia\n o \nelenco\n.\n\nPermette anche di passare alla schermata, precedente o successiva a quella in cui ci si trova, per poter visualizzare gli altri elementi risultati dalla ricerca.\n\nLa selezione di un elemento permette il reindirizzamento alla pagina dell\u2019elemento stesso.  \n\n\nComportamenti specifici\n\n\nLa pagina \u00e8 composta dall\u2019unione di diversi componenti: \npagecontainer\n, \nfilterbar\n, \nfilterbarBiblioteca\n, \nsearchbar\n e \nresult\n.  \n\n\n\n\npagecontainer\n \u2192 contenitore per l\u2019insieme dei risultati dell\u2019\narchivio\n e della \nbiblioteca\n.\n\n\nfilterbar\n \u2192 filtri dell\u2019\narchivio\n.\n\n\nfilterbarBiblioteca\n \u2192 filtri della \nbiblioteca\n.\n\n\nsearchbar\n \u2192 barra di ricerca, con filtri \u201c\nA-Z\n\u201d, \u201c\nZ-A\n\u201d, \u201c\nPi\u00f9 recenti\n\u201d e \u201c\nMeno recenti\n\u201d.\n\n\nresult\n \u2192 gli elementi risultanti dalla ricerca, le icone di passaggio alle pagine (precedenti e successive) e le icone per mostrare gli elementi risultati secondo una griglia o un elenco.  \n\n\n\n\nimport AuiPageContainer from '~/components/pagecontainer/pagecontainer.vue'\nimport AuiFilterbar from '~/components/cerca/filterbar/filterbar.vue'\nimport AuiFilterbarBiblioteca from '~/components/cerca/filterbarBiblioteca/filterbarBiblioteca.vue'\nimport AuiSearchbar from '~/components/cerca/searchbar/searchbar.vue'\nimport AuiResult from '~/components/cerca/result/result.vue'\n\n\n\n\n\n\nQuando degli elementi nella \nquery\n cambiano (cambio dell\u2019URL del sito: es.https://front.teatrostabile.promemoriagroup.com/cerca?tags=amleto&sort=az&page=0 ...), lo \nstore.dispatch\n effettua tre chiamate alla \nquery\n:  \n\n\n\n\n\n\ncerca/getFiltri\n;\n\n\n\n\n\n\ncerca/getData\n\n\n\n\n\n\ncerca/getCountAltro\n\n\n\n\n\n\nlet [filtri, data, countAltro] = await Promise.all\n\n\n\n\nQueste tre chiamate riconducono a tre diverse azioni presenti nello \nstore\n e cambieranno gli elementi all\u2019interno della \nquery\n.\n\nLa riuscita di queste tre diverse azioni, che vengono eseguite in parallelo, dar\u00e0 come output i risultati per la ricerca effettuata.  \n\n\n\n\nwatchQuery: ['filtro', 'data', 'tags', 'sort', 'page', 'tab', 'titolo', 'soggetto'], \nasync asyncData({store, query})\n\n\n\n\n\n\n\u2018filtro\u2019\n \u2192 filtri in generale della sezione Archivio.\n\n\n\u2018data\u2019\n \u2192 filtro data della sezione Archivio.\n\n\n\u2018tags\u2019\n \u2192 parole ricercate nella barra di ricerca.\n\n\n\u2018sort\u2019\n \u2192 tipo di ordinamento: \u201cRilevanza\u201d, \u201cA-Z\u201d, \u201cZ-A\u201d, \u201cPi\u00f9 recente\u201d e \u201cMeno recente\u201d.\n\n\n\u2018page\u2019\n \u2192 impaginazione dei risultati ( \u2018<\u2019  o  \u2018>\u2019    es. page 1, page 2\u2026).\n\n\n\u2018tab\u2019\n \u2192 sezione Archivio o Biblioteca.\n\n\n\u2018titolo\u2019\n \u2192 filtro della sezione Biblioteca.\n\n\n\u2018soggetto\u2019\n \u2192 altro filtro della sezione Biblioteca.\n\n\n\n\n\n\nLa prima azione richiama il metodo \ngetFiltri()\n nel \ncerca.js\n contenuto nello \nstore\n.\n\nCorrisponde alla chiamata/selezione dei filtri di \nArchivio\n e \nBiblioteca\n.  \n\n\nstore.dispatch('cerca/getFiltri', {\n    queryTags,\n    filtriSelezionati,\n    filtriDataSelezionati,\n    titolo,\n    soggetto,\n    tab\n}),\n\n\n\n\n\n\n\n\nLa seconda azione richiama il metodo \ngetData()\n nel \ncerca.js\n contenuto nello \nstore\n.\n\nCorrisponde alla chiamata dei risultati della ricerca.  \n\n\nstore.dispatch('cercs/getData', {\n    queryTags,\n    filtriSelezionati,\n    skip,\n    limit,\n    'sort': orderByComputed.currentSort.query,\n    titolo,\n    soggetto,\n    tab,\n    showInitialResult\n}),\n\n\n\n\n\n\n\n\nLa terza azione richiama il metodo \ngetCountAltro()\n nel \ncerca.js\n contenuto nello \nstore\n.\n\nCorrisponde alla chiamata del numero di risultati ottenuti o in \nArchivio\n o in \nBiblioteca\n.  \n\n\nstore.dispatch('cerca/getCountAltro', {\n    queryTags,\n    tab: tab === tabArchivio ? tabBiblioteca : tabArchivio\n})\n\n\n\n\n\n\n\n\n\n\nI Filtri:\n\n\nIl vettore \nsortOptions\n mostra i diversi tipi di ordinamento per gli elementi: \u201c\nA-Z\n\u201d, \u201c\nZ-A\n\u201d, \u201c\nPi\u00f9 recenti\n\u201d e \u201c\nMeno recenti\n\u201d. Questi tipi sono gestiti dal metodo \nupdateSort()\n.  \n\n\nupdateSort (option){\n    if (option && this.orderBy.currentSort.value !== option.value){\n        this.orderBy.currentSort = option\n        this.aggiornaQuery()\n    }\n},\n\n\n\n\n\n\n\n\nIl metodo \nnextPage()\n:\n\n\npermette di mostrare la pagina successiva, a quella in cui ci si trova, contenente i restanti risultati della ricerca effettuata (es. page 1 \u2192 page 2).  \n\n\nnextPage (){\n    this.skip = this.skip + 1\n    this.aggiornaQuery(true)\n},\n\n\n\n\nClick sulla freccia: \n\n\n\n\nIl metodo \nprevPage()\n:\n\n\npermette di mostrare la pagina precedente, a quella in cui ci si trova, contenente i restanti risultati della ricerca effettuata (es. page 2 \u2192 page 1).  \n\n\nprevPage (){\n    thi.skip = this.skip - 1\n    this.aggiornaQuery(true)\n},\n\n\n\n\nClick sulla freccia: \n\n\n\n\nIl metodo \nswitchTab()\n:\n\n\npermette di passare dalla sezione \nArchivio\n a quella \nBiblioteca\n e viceversa, cancellando i filtri che si erano selezionati.  \n\n\nswitchTab (){\n    this.filtriSelezionati = []\n    this.filtriDataSelezionati = {\n        from: '',\n        to: ''\n    }\n}\n\n\n\n\n\n\n1) Per la sezione Archivio (filtri):\n\n\nIl metodo \nsetFiltro()\n:\n\n\naggiunge il filtro selezionato all\u2019insieme di filtri gi\u00e0 in uso per la ricerca che si sta effettuando e aggiorna la ricerca.  \n\n\nsetFiltro (){\n    this.filtriSelezionati.push(filtro)\n    this.aggiornaQuery()\n},\n\n\n\n\n\n\nIl metodo \nremoveFiltro()\n:\n\n\nrimuove il filtro selezionato, attraverso un indice che corrisponde all\u2019id del filtro, dall\u2019insieme di filtri gi\u00e0 in uso per la ricerca che si sta effettuando e aggiorna la ricerca.  \n\n\nremoveFiltro (){\n    var index = _.findIndex(this.filtriSelezionati, item => item.id === filtro.id)\n    this.filtriSelezionati.splice(index, 1)\n    this.aggiornaQuery()\n},\n\n\n\n\n\n\nIl metodo \nremoveAllFilters()\n:\n\n\nse vi \u00e8 pi\u00f9 di un filtro selezionato, cliccando su \u201c\nRIMUOVI TUTTI\n\u201d, vengono rimossi tutti i filtri e mostrati di nuovo tutti gli elementi contenuti nell\u2019archivio.  \n\n\nremoveAllFilters (){\n    this.filtriSelezionati = []\n    this.aggiornaQuery()\n},\n\n\n\n\n\n\n\n\nIl metodo \nsetDataFiltri()\n:\n\n\npermette la selezione di un range di tempo (\nfrom \u2192 to\n) che selezioner\u00e0 solo gli elementi compresi in quelle date.  \n\n\nsetDataFiltri (filtriDataSelezionati){\n    this.filtriDataSelezionati = {\n        from: filtriDataSelezionati.from ? filtriDataSelezionati.from.getTime() : '',\n        to: filtriDataSelezionati.to ? filtriDataSelezionati.to.getTime : ''\n    }\n    this.aggiornaQuery()\n},\n\n\n\n\n\n\n\n\n2) Per la sezione Biblioteca (filtri):\n\n\nIl metodo \nsetAdvSearch()\n:\n\n\npermette di aggiungere ai filtri solo un autore e un genere, selezionabili tramite un men\u00f9, mentre filtra, svolgendo una ricerca, per titolo e soggetto che vengono inseriti manualmente dall\u2019utente.  \n\n\nsetAdvSearch (params){\n    this.filtriSelezionati = []\n    if (params.autore) {\n        this.filtriSelezionati.push(params.autore)\n    }\n    if (params.genere){\n        this.filtriSelezionati.push(params.genere)\n    }\n    this.titolo = params.titolo\n    this.soggetto = params.soggetto\n    this.aggiornaQuery()\n},",
            "title": "Cerca"
        },
        {
            "location": "/cercapg/#cerca",
            "text": "",
            "title": "Cerca"
        },
        {
            "location": "/cercapg/#descrizione-generale",
            "text": "La pagina \u201ccerca\u201d \u00e8 la pagina in cui vengono visualizzati gli elementi della ricerca effettuata. \nPermette di ricercare manualmente degli elementi, attraverso una barra di ricerca e, attraverso l\u2019utilizzo di filtri, di scremare ulteriormente la ricerca, sia dalla parte dell\u2019 Archivio , sia da quella della  Biblioteca  (2 tipologie di filtri differenti). \n\u00c8 possibile, inoltre, visualizzare i risultati della ricerca secondo diversi tipi d\u2019ordine: \u201c A-Z \u201d, \u201c Z-A \u201d, \u201c Pi\u00f9 recente \u201d e \u201c Meno recente \u201d e se visualizzarli in formato  griglia  o  elenco . \nPermette anche di passare alla schermata, precedente o successiva a quella in cui ci si trova, per poter visualizzare gli altri elementi risultati dalla ricerca. \nLa selezione di un elemento permette il reindirizzamento alla pagina dell\u2019elemento stesso.",
            "title": "Descrizione generale"
        },
        {
            "location": "/cercapg/#comportamenti-specifici",
            "text": "La pagina \u00e8 composta dall\u2019unione di diversi componenti:  pagecontainer ,  filterbar ,  filterbarBiblioteca ,  searchbar  e  result .     pagecontainer  \u2192 contenitore per l\u2019insieme dei risultati dell\u2019 archivio  e della  biblioteca .  filterbar  \u2192 filtri dell\u2019 archivio .  filterbarBiblioteca  \u2192 filtri della  biblioteca .  searchbar  \u2192 barra di ricerca, con filtri \u201c A-Z \u201d, \u201c Z-A \u201d, \u201c Pi\u00f9 recenti \u201d e \u201c Meno recenti \u201d.  result  \u2192 gli elementi risultanti dalla ricerca, le icone di passaggio alle pagine (precedenti e successive) e le icone per mostrare gli elementi risultati secondo una griglia o un elenco.     import AuiPageContainer from '~/components/pagecontainer/pagecontainer.vue'\nimport AuiFilterbar from '~/components/cerca/filterbar/filterbar.vue'\nimport AuiFilterbarBiblioteca from '~/components/cerca/filterbarBiblioteca/filterbarBiblioteca.vue'\nimport AuiSearchbar from '~/components/cerca/searchbar/searchbar.vue'\nimport AuiResult from '~/components/cerca/result/result.vue'",
            "title": "Comportamenti specifici"
        },
        {
            "location": "/cercapg/#i-filtri",
            "text": "Il vettore  sortOptions  mostra i diversi tipi di ordinamento per gli elementi: \u201c A-Z \u201d, \u201c Z-A \u201d, \u201c Pi\u00f9 recenti \u201d e \u201c Meno recenti \u201d. Questi tipi sono gestiti dal metodo  updateSort() .    updateSort (option){\n    if (option && this.orderBy.currentSort.value !== option.value){\n        this.orderBy.currentSort = option\n        this.aggiornaQuery()\n    }\n},",
            "title": "I Filtri:"
        },
        {
            "location": "/cercapg/#il-metodo-nextpage",
            "text": "permette di mostrare la pagina successiva, a quella in cui ci si trova, contenente i restanti risultati della ricerca effettuata (es. page 1 \u2192 page 2).    nextPage (){\n    this.skip = this.skip + 1\n    this.aggiornaQuery(true)\n},  Click sulla freccia:",
            "title": "Il metodo nextPage():"
        },
        {
            "location": "/cercapg/#il-metodo-prevpage",
            "text": "permette di mostrare la pagina precedente, a quella in cui ci si trova, contenente i restanti risultati della ricerca effettuata (es. page 2 \u2192 page 1).    prevPage (){\n    thi.skip = this.skip - 1\n    this.aggiornaQuery(true)\n},  Click sulla freccia:",
            "title": "Il metodo prevPage():"
        },
        {
            "location": "/cercapg/#il-metodo-switchtab",
            "text": "permette di passare dalla sezione  Archivio  a quella  Biblioteca  e viceversa, cancellando i filtri che si erano selezionati.    switchTab (){\n    this.filtriSelezionati = []\n    this.filtriDataSelezionati = {\n        from: '',\n        to: ''\n    }\n}",
            "title": "Il metodo switchTab():"
        },
        {
            "location": "/cercapg/#1-per-la-sezione-archivio-filtri",
            "text": "",
            "title": "1) Per la sezione Archivio (filtri):"
        },
        {
            "location": "/cercapg/#il-metodo-setfiltro",
            "text": "aggiunge il filtro selezionato all\u2019insieme di filtri gi\u00e0 in uso per la ricerca che si sta effettuando e aggiorna la ricerca.    setFiltro (){\n    this.filtriSelezionati.push(filtro)\n    this.aggiornaQuery()\n},",
            "title": "Il metodo setFiltro():"
        },
        {
            "location": "/cercapg/#il-metodo-removefiltro",
            "text": "rimuove il filtro selezionato, attraverso un indice che corrisponde all\u2019id del filtro, dall\u2019insieme di filtri gi\u00e0 in uso per la ricerca che si sta effettuando e aggiorna la ricerca.    removeFiltro (){\n    var index = _.findIndex(this.filtriSelezionati, item => item.id === filtro.id)\n    this.filtriSelezionati.splice(index, 1)\n    this.aggiornaQuery()\n},",
            "title": "Il metodo removeFiltro():"
        },
        {
            "location": "/cercapg/#il-metodo-removeallfilters",
            "text": "se vi \u00e8 pi\u00f9 di un filtro selezionato, cliccando su \u201c RIMUOVI TUTTI \u201d, vengono rimossi tutti i filtri e mostrati di nuovo tutti gli elementi contenuti nell\u2019archivio.    removeAllFilters (){\n    this.filtriSelezionati = []\n    this.aggiornaQuery()\n},",
            "title": "Il metodo removeAllFilters():"
        },
        {
            "location": "/cercapg/#il-metodo-setdatafiltri",
            "text": "permette la selezione di un range di tempo ( from \u2192 to ) che selezioner\u00e0 solo gli elementi compresi in quelle date.    setDataFiltri (filtriDataSelezionati){\n    this.filtriDataSelezionati = {\n        from: filtriDataSelezionati.from ? filtriDataSelezionati.from.getTime() : '',\n        to: filtriDataSelezionati.to ? filtriDataSelezionati.to.getTime : ''\n    }\n    this.aggiornaQuery()\n},",
            "title": "Il metodo setDataFiltri():"
        },
        {
            "location": "/cercapg/#2-per-la-sezione-biblioteca-filtri",
            "text": "",
            "title": "2) Per la sezione Biblioteca (filtri):"
        },
        {
            "location": "/cercapg/#il-metodo-setadvsearch",
            "text": "permette di aggiungere ai filtri solo un autore e un genere, selezionabili tramite un men\u00f9, mentre filtra, svolgendo una ricerca, per titolo e soggetto che vengono inseriti manualmente dall\u2019utente.    setAdvSearch (params){\n    this.filtriSelezionati = []\n    if (params.autore) {\n        this.filtriSelezionati.push(params.autore)\n    }\n    if (params.genere){\n        this.filtriSelezionati.push(params.genere)\n    }\n    this.titolo = params.titolo\n    this.soggetto = params.soggetto\n    this.aggiornaQuery()\n},",
            "title": "Il metodo setAdvSearch():"
        },
        {
            "location": "/docimg/",
            "text": "Documenti e immagini\n\n\n\n\n\nDescrizione generale\n\n\nLa pagina \u201cdocumenti-e-immagini\u201d, contenente tutti gli elementi sotto forma di \u201c\ncard\n\u201d, con preview e ordinati per stagione, appartenenti a quella categoria.\n\n\u00c8 possibile filtrarli secondo: \nFotografia\n, \nRassegna stampa\n, \nManifesti e locandine\n, \nProgramma\n, \nSchede di sala\n, \nCopione\n, \nComunicato stampa\n e \nSerie\n.  \n\n\nComportamenti specifici\n\n\nLa pagina \u00e8 composta e richiama il componente: \nbrowse\n.  \n\n\nimport AuiBrowse from '~/components/browse/browse.vue'\n\n\n\n\n\n\nEsegue la funzione \nasyncData\n che permette di gestire le operazioni asincrone prima di impostare i dati del componente.\n\nRecupera i dati dal componente \nbrowse-documenti\n, aspettando finch\u00e9 non vengono mandate allo \nstore\n le azioni dei metodi \ngetFiltri\n e \ngetData\n del componente e li restituisce passandoli rispettivamente alle variabili \nfilters\n e \ndata\n.\n\nAssegner\u00e0 alle propriet\u00e0 \ntotal\n, \nresult\n e \nfilters\n i rispettivi dati contenuti in \nfilters\n e \ndata\n.  \n\n\nwacthQuery: ['filtro'],\nasync asyncData({store, query}) {\n  let filters = await store.dispatch('browse-documenti/getFiltri')\n  let data = await store.dispatch('browse-documenti/getData', {\n    filter: query.filtro || filters[0]._id\n  })\n  return {\n    total: data.total,\n    result: data.result,\n    filters: filters\n  }\n},\n\n\n\n\n\n\nImposta come titolo della pagina \u201c\nDocumenti e immagini\n\u201d.  \n\n\nhead() {\n    return{\n        title: 'Documenti e immagini'\n  }\n}",
            "title": "Documenti e immagini"
        },
        {
            "location": "/docimg/#documenti-e-immagini",
            "text": "",
            "title": "Documenti e immagini"
        },
        {
            "location": "/docimg/#descrizione-generale",
            "text": "La pagina \u201cdocumenti-e-immagini\u201d, contenente tutti gli elementi sotto forma di \u201c card \u201d, con preview e ordinati per stagione, appartenenti a quella categoria. \n\u00c8 possibile filtrarli secondo:  Fotografia ,  Rassegna stampa ,  Manifesti e locandine ,  Programma ,  Schede di sala ,  Copione ,  Comunicato stampa  e  Serie .",
            "title": "Descrizione generale"
        },
        {
            "location": "/docimg/#comportamenti-specifici",
            "text": "La pagina \u00e8 composta e richiama il componente:  browse .    import AuiBrowse from '~/components/browse/browse.vue'",
            "title": "Comportamenti specifici"
        },
        {
            "location": "/dramma/",
            "text": "Il Dramma\n\n\n\n\n\nDescrizione generale\n\n\nLa pagina \u201cil-dramma\u201d, contenente tutti gli elementi sotto forma di \u201c\ncard\n\u201d, con preview e ordinati per \ndata\n, appartenenti a quella categoria.  \n\n\nComportamenti specifici\n\n\nLa pagina \u00e8 composta e richiama il componente: \nbrowse\n.  \n\n\nimport AuiBrowse from '~/components/browse/browse.vue'\n\n\n\n\n\n\nEsegue la funzione \nasyncData\n che permette di gestire le operazioni asincrone prima di impostare i dati del componente.\n\nRecupera i dati del componente \nbrowse-dramma\n, aspettando finch\u00e9 non vengono mandate allo \nstore\n le azioni del metodo \ngetData( )\n del componente e li restituisce passandoli alla variabile \ndata\n.\n\nAssegner\u00e0 alle propriet\u00e0 \ntotal\n e \nresult\n i rispettivi dati contenuti in \ndata\n.  \n\n\nasync asyncData ({store, query}) {\n    let data = await store.dispatch('browse-dramma/getData')\n    return {\n        total: data.total,\n        result: data.result\n    }\n},\n\n\n\n\n\n\nImposta come titolo della pagina \u201c\nIl Dramma\n\u201d.  \n\n\nhead() {\n    return{\n        title: 'Il Dramma'\n  }\n}",
            "title": "Il Dramma"
        },
        {
            "location": "/dramma/#il-dramma",
            "text": "",
            "title": "Il Dramma"
        },
        {
            "location": "/dramma/#descrizione-generale",
            "text": "La pagina \u201cil-dramma\u201d, contenente tutti gli elementi sotto forma di \u201c card \u201d, con preview e ordinati per  data , appartenenti a quella categoria.",
            "title": "Descrizione generale"
        },
        {
            "location": "/dramma/#comportamenti-specifici",
            "text": "La pagina \u00e8 composta e richiama il componente:  browse .    import AuiBrowse from '~/components/browse/browse.vue'",
            "title": "Comportamenti specifici"
        },
        {
            "location": "/persone/",
            "text": "Persone\n\n\n\n\n\nDescrizione generale\n\n\nLa pagina \u201cpersone\u201d, contenente tutti gli elementi sotto forma di \nelenco\n, ordinati in ordine alfabetico, appartenenti a quella categoria.  \n\n\nComportamenti specifici\n\n\nLa pagina \u00e8 composta e richiama il componente: \nbrowse\n.  \n\n\nimport AuiBrowse from '~/components/browse/browse.vue'\n\n\n\n\n\n\nEsegue la funzione \nasyncData\n che permette di gestire le operazioni asincrone prima di impostare i dati del componente.\n\nRecupera i dati del componente \nbrowse-persone\n, aspettando finch\u00e9 non vengono mandate allo \nstore\n le azioni del metodo \ngetData()\n del componente e li restituisce passandoli alla variabile \ndata\n.\n\nAssegner\u00e0 alle propriet\u00e0 \ntotal\n e \nresult\n i rispettivi dati contenuti in \ndata\n.  \n\n\nasync asyncData ({store, query}) {\n    let data = await store.dispatch('browse-persone/getData')\n    return{\n        total: data.total,\n        result: data.result\n    }\n},\n\n\n\n\n\n\nImposta come titolo della pagina \u201c\nPersone\n\u201d.  \n\n\nhead() {\n    return{\n        title: 'Persone'\n  }\n}",
            "title": "Persone"
        },
        {
            "location": "/persone/#persone",
            "text": "",
            "title": "Persone"
        },
        {
            "location": "/persone/#descrizione-generale",
            "text": "La pagina \u201cpersone\u201d, contenente tutti gli elementi sotto forma di  elenco , ordinati in ordine alfabetico, appartenenti a quella categoria.",
            "title": "Descrizione generale"
        },
        {
            "location": "/persone/#comportamenti-specifici",
            "text": "La pagina \u00e8 composta e richiama il componente:  browse .    import AuiBrowse from '~/components/browse/browse.vue'",
            "title": "Comportamenti specifici"
        },
        {
            "location": "/spettacoli/",
            "text": "Spettacoli\n\n\n\n\n\nDescrizione generale\n\n\nLa pagina \u201cspettacoli\u201d, contenente tutti gli elementi sotto forma di \nelenco\n, ordinati per stagione, appartenenti a quella categoria.  \n\n\nComportamenti specifici\n\n\nLa pagina \u00e8 composta e richiama il componente: \nbrowse\n.  \n\n\nimport AuiBrowse from '~/components/browse/browse.vue'\n\n\n\n\n\n\nEsegue la funzione \nasyncData\n che permette di gestire le operazioni asincrone prima di impostare i dati del componente.\n\nRecupera i dati del componente \nbrowse-spettacoli\n, aspettando finch\u00e9 non vengono mandate allo \nstore\n le azioni del metodo \ngetData()\n del componente e li restituisce passandoli alla variabile \ndata\n.\n\nAssegner\u00e0 alle propriet\u00e0 \ntotal\n e \nresult\n i rispettivi dati contenuti in \ndata\n.  \n\n\nasync asyncData ({store, query}) {\n    let data = await store.dispatch('browse-spettacoli/getData')\n    return{\n        total: data.total,\n        result: data.result\n    }\n},\n\n\n\n\n\n\nImposta come titolo della pagina \u201c\nSpettacoli\n\u201d.  \n\n\nhead() {\n    return{\n        title: 'Spettacoli'\n  }\n}",
            "title": "Spettacoli"
        },
        {
            "location": "/spettacoli/#spettacoli",
            "text": "",
            "title": "Spettacoli"
        },
        {
            "location": "/spettacoli/#descrizione-generale",
            "text": "La pagina \u201cspettacoli\u201d, contenente tutti gli elementi sotto forma di  elenco , ordinati per stagione, appartenenti a quella categoria.",
            "title": "Descrizione generale"
        },
        {
            "location": "/spettacoli/#comportamenti-specifici",
            "text": "La pagina \u00e8 composta e richiama il componente:  browse .    import AuiBrowse from '~/components/browse/browse.vue'",
            "title": "Comportamenti specifici"
        },
        {
            "location": "/stagioni/",
            "text": "Stagioni\n\n\n\n\n\nDescrizione generale\n\n\nLa pagina \u201cstagioni\u201d, contenente tutti gli elementi sotto forma di \nelenco\n, ordinati per stagione, appartenenti a quella categoria.  \n\n\nComportamenti specifici\n\n\nLa pagina \u00e8 composta e richiama il componente: \nbrowse\n.  \n\n\nimport AuiBrowse from '~/components/browse/browse.vue'\n\n\n\n\n\n\nEsegue la funzione \nasyncData\n che permette di gestire le operazioni asincrone prima di impostare i dati del componente. \n\nRecupera i dati del componente \nbrowse-stagioni\n, aspettando finch\u00e9 non vengono mandate allo \nstore\n le azioni del metodo \ngetData()\n del componente e li restituisce passandoli alla variabile \ndata\n.\n\nAssegner\u00e0 alle propriet\u00e0 \ntotal\n e \nresult\n i rispettivi dati contenuti in \ndata\n.  \n\n\nasync asyncData ({store, query}) {\n    let data = await store.dispatch('browse-stagioni/getData')\n    return {\n        total: data.total,\n        result:data.result\n    }\n},\n\n\n\n\n\n\nImposta come titolo della pagina \u201c\nStagioni\n\u201d.  \n\n\nhead() {\n    return{\n        title: 'Stagioni'\n  }\n}",
            "title": "Stagioni"
        },
        {
            "location": "/stagioni/#stagioni",
            "text": "",
            "title": "Stagioni"
        },
        {
            "location": "/stagioni/#descrizione-generale",
            "text": "La pagina \u201cstagioni\u201d, contenente tutti gli elementi sotto forma di  elenco , ordinati per stagione, appartenenti a quella categoria.",
            "title": "Descrizione generale"
        },
        {
            "location": "/stagioni/#comportamenti-specifici",
            "text": "La pagina \u00e8 composta e richiama il componente:  browse .    import AuiBrowse from '~/components/browse/browse.vue'",
            "title": "Comportamenti specifici"
        },
        {
            "location": "/teatrico/",
            "text": "Teatri e compagnie\n\n\n\n\n\nDescrizione generale\n\n\nLa pagina \u201cteatri-e-compagnie\u201d, contenente tutti gli elementi sotto forma di \nelenco\n, ordinati in ordine alfabetico, appartenenti a quella categoria.  \n\n\nComportamenti specifici\n\n\nLa pagina \u00e8 composta e richiama il componente: \nbrowse\n.  \n\n\nimport AuiBrowse from '~/components/browse/browse.vue'\n\n\n\n\n\n\nEsegue la funzione \nasyncData\n che permette di gestire le operazioni asincrone prima di impostare i dati del componente.\n\nRecupera i dati del componente \nbrowse-teatri\n, aspettando finch\u00e9 non vengono mandate allo \nstore\n le azioni del metodo \ngetData()\n del componente e li restituisce passandoli alla variabile \ndata\n.\n\nAssegner\u00e0 alle propriet\u00e0 \ntotal\n e \nresult\n i rispettivi dati contenuti in \ndata\n.  \n\n\nasync asyncData ({store, query}) {\n    let data = await store.dispatch('browse-teatri/getData')\n    return{\n        total: data.total,\n        result: data.result\n    }\n},\n\n\n\n\n\n\nImposta come titolo della pagina \u201c\nTeatri e compagnie\n\u201d.  \n\n\nhead() {\n    return{\n        title: 'Stagioni'\n  }\n}",
            "title": "Teatri e compagnie"
        },
        {
            "location": "/teatrico/#teatri-e-compagnie",
            "text": "",
            "title": "Teatri e compagnie"
        },
        {
            "location": "/teatrico/#descrizione-generale",
            "text": "La pagina \u201cteatri-e-compagnie\u201d, contenente tutti gli elementi sotto forma di  elenco , ordinati in ordine alfabetico, appartenenti a quella categoria.",
            "title": "Descrizione generale"
        },
        {
            "location": "/teatrico/#comportamenti-specifici",
            "text": "La pagina \u00e8 composta e richiama il componente:  browse .    import AuiBrowse from '~/components/browse/browse.vue'",
            "title": "Comportamenti specifici"
        },
        {
            "location": "/browse/",
            "text": "Browse\n\n\n\n\n\nDescrizione generale\n\n\nIl componente \u201cbrowse\u201d contiene al suo interno altri componenti:  \n\n\n\n\n\n\nbox\n\n\n\n\n\n\nbrowsebar\n\n\n\n\n\n\nbrowsefilter\n\n\n\n\n\n\nlist\n\n\n\n\n\n\nComportamenti specifici\n\n\nImporta i componenti: \nlist\n, \nbox\n, \nbrowsefilter\n e \nbrowsebar\n.  \n\n\nimport AuiList from './list/list.vue'\nimport AuiBox from './box/box.vue'\nimport AuiBrowsefilter from './browsefilter/browsefilter.vue'\nimport AuiBrowsebar from './browsebar/browsebar.vue'\n\n\n\n\n\n\nRestituir\u00e0 a \nfilteredResult()\n la variabile \ntmp\n contenente tutti i gli elementi della propriet\u00e0 \nresult\n, clonati ricorsivamente e in modo superficiale (\n_.cloneDeep\n).\n\nAssegner\u00e0 nel file .html \nfilteredResult()\n in modo che gli elementi risultanti vengano visualizzati sotto forma di una \u201c\ncard\n\u201d o di un \nelenco\n.  \n\n\ncomputed: {\n    filteredResult (){\n        let tmp = _.cloneDeep(this.result)\n        if (this.autocomplete){\n            tmp = _.map(tmp, e => {\n                e.items = _.filter (e.items, i =>{\n                    return new RegExp (this.autocomplete, 'i').test(i.label)\n                })\n                return e    \n            })\n        }\n        this.totale = _.reduce(tmp, (group, total) => {\n            return group + _.size(total.items)\n        }, 0)\n        return tmp\n    }\n},\n\n\n\n\n\n\n<aui-box :data=\"filteredResult\" v-if=\"view === 'box'\"> </aui-box>\n<aui-list :data=\"filteredResult\" v-if=\"view === 'list'\"> </aui-list>\n\n\n\n\n\n\nIl metodo \nsetFilter()\n:\n\n\naggiorna la \nquery\n e, quindi, gli elementi risultanti nella pagina in base alla selezione di un filtro, grazie al metodo \nopenSelect()\n per la pagina \nDocumenti e immagini\n o, per \ndata\n o \nlettera alfabetica\n nel componente \nsticky\n delle pagine: \nIl Dramma\n, \nPersone\n, \nSpettacoli\n, \nStagioni\n e \nTeatri e compagnie\n.  \n\n\nsetFilter (filtro){\n    if (this.filters){\n        var currentFilter = this.$route.query.filtro || this.filters[0]._id\n        if(currentFilter !== filtro._id) {\n            this.aggiornaQuery({\n                filtro: filtro._id === 'Tutti' ? '' : filtro._id\n            })\n        }\n    }\n},\n\n\n\n\n\n\nI metodi \nopenSelect()\n e \ncloseSelect()\n:\n\n\nal click della rispettiva icona, aprono e chiudono un men\u00f9 di filtri a selezione, solamente nella pagina \nDocumenti e immagini\n.  \n\n\nopenSelect ($event){\n    var el = $($event.target)\n    if (el.is('span.selected-tag') || el.is('i.open-indicator')){\n        this.$refs['sselect'].open = true\n    }\n},\ncloseSelect(){\n    this.$refs['sselect'].open = false\n}",
            "title": "browse"
        },
        {
            "location": "/browse/#browse",
            "text": "",
            "title": "Browse"
        },
        {
            "location": "/browse/#descrizione-generale",
            "text": "Il componente \u201cbrowse\u201d contiene al suo interno altri componenti:      box    browsebar    browsefilter    list",
            "title": "Descrizione generale"
        },
        {
            "location": "/browse/#comportamenti-specifici",
            "text": "Importa i componenti:  list ,  box ,  browsefilter  e  browsebar .    import AuiList from './list/list.vue'\nimport AuiBox from './box/box.vue'\nimport AuiBrowsefilter from './browsefilter/browsefilter.vue'\nimport AuiBrowsebar from './browsebar/browsebar.vue'",
            "title": "Comportamenti specifici"
        },
        {
            "location": "/browse/#il-metodo-setfilter",
            "text": "aggiorna la  query  e, quindi, gli elementi risultanti nella pagina in base alla selezione di un filtro, grazie al metodo  openSelect()  per la pagina  Documenti e immagini  o, per  data  o  lettera alfabetica  nel componente  sticky  delle pagine:  Il Dramma ,  Persone ,  Spettacoli ,  Stagioni  e  Teatri e compagnie .    setFilter (filtro){\n    if (this.filters){\n        var currentFilter = this.$route.query.filtro || this.filters[0]._id\n        if(currentFilter !== filtro._id) {\n            this.aggiornaQuery({\n                filtro: filtro._id === 'Tutti' ? '' : filtro._id\n            })\n        }\n    }\n},",
            "title": "Il metodo setFilter():"
        },
        {
            "location": "/browse/#i-metodi-openselect-e-closeselect",
            "text": "al click della rispettiva icona, aprono e chiudono un men\u00f9 di filtri a selezione, solamente nella pagina  Documenti e immagini .    openSelect ($event){\n    var el = $($event.target)\n    if (el.is('span.selected-tag') || el.is('i.open-indicator')){\n        this.$refs['sselect'].open = true\n    }\n},\ncloseSelect(){\n    this.$refs['sselect'].open = false\n}",
            "title": "I metodi openSelect() e closeSelect():"
        },
        {
            "location": "/cerca/",
            "text": "Cerca\n\n\n\n\n\nDescrizione generale\n\n\nIl componente \u201ccerca\u201d contiene al suo interno altri componenti: \nfilterbar\n, \nfilterbarBiblioteca\n, \nresult\n e \nsearchbar\n.\n\n\nFilterbar\n e \nfilterbarBiblioteca\n sono, rispettivamente, i \nfiltri dell\u2019Archivio\n e  \ndella Biblioteca\n; \nsearchbar\n \u00e8 la barra per la ricerca manuale con l\u2019ordinamento degli elementi (\u201c\nA-Z\n\u201d, \u201c\nZ-A\n\u201d, \u201c\nPi\u00f9 recente\n\u201d e \u201c\nMeno recente\n\u201d) e \nresult\n \u00e8, invece, l\u2019insieme dei bottoni (\u201c\n<\n\u201d e \u201c\n>\n\u201d) per la visualizzazione successiva o precedente delle pagine dei risultati e le icone per la loro visualizzazione a \ngriglia\n o a \nelenco\n.  \n\n\nComportamenti specifici\n\n\nI suoi comportamenti rspecifici vanno ricercati nell'utilizzo specifico dei suoi sotto componenti:  \n\n\n\n\n\n\nfilterbar\n\n\n\n\n\n\nfilterbarbiblioteca\n\n\n\n\n\n\nresult\n\n\n\n\n\n\nsearchbar",
            "title": "cerca"
        },
        {
            "location": "/cerca/#cerca",
            "text": "",
            "title": "Cerca"
        },
        {
            "location": "/cerca/#descrizione-generale",
            "text": "Il componente \u201ccerca\u201d contiene al suo interno altri componenti:  filterbar ,  filterbarBiblioteca ,  result  e  searchbar .  Filterbar  e  filterbarBiblioteca  sono, rispettivamente, i  filtri dell\u2019Archivio  e   della Biblioteca ;  searchbar  \u00e8 la barra per la ricerca manuale con l\u2019ordinamento degli elementi (\u201c A-Z \u201d, \u201c Z-A \u201d, \u201c Pi\u00f9 recente \u201d e \u201c Meno recente \u201d) e  result  \u00e8, invece, l\u2019insieme dei bottoni (\u201c < \u201d e \u201c > \u201d) per la visualizzazione successiva o precedente delle pagine dei risultati e le icone per la loro visualizzazione a  griglia  o a  elenco .",
            "title": "Descrizione generale"
        },
        {
            "location": "/cerca/#comportamenti-specifici",
            "text": "I suoi comportamenti rspecifici vanno ricercati nell'utilizzo specifico dei suoi sotto componenti:      filterbar    filterbarbiblioteca    result    searchbar",
            "title": "Comportamenti specifici"
        },
        {
            "location": "/detail/",
            "text": "Detail\n\n\n\n\n\nDescrizione generale\n\n\nIl componente \u201cdetail\u201d contiene al suo interno altri componenti: \nmetadati\n, \nrelated\n e \nspettacoli-view\n, che contiene al suo interno il componente \nlocandina\n.\n\n\u00c8 la pagina in cui si viene reindirizzati quando si seleziona un elemento della pagina \nCerca\n o dalle altre pagine del men\u00f9.\n\nEsso mostra il nome dell\u2019elemento, una gallery di immagini, una sua descrizione (\nmetadati\n) e gli elementi ad esso collegati (\nrelated\n).\n\nSe si apre un elemento degli spettacoli, viene visualizzata la pagina dell\u2019elemento con una descrizione (\nmetadati\n), e gli elementi correlati sotto forma di \ncard\n e a lato un immagine della locandina dello spettacolo (\nspettacoli-view\n/\nlocandina\n) con sotto un elenco degli elementi correlati (\nrelated\n).  \n\n\nComportamenti specifici\n\n\nImporta i componenti: \nrelated\n, \ngallery\n e \nmetadati\n.  \n\n\nimport AuiRelated from './related/related.vue'\nimport AuiGallery from './../gallery/gallery.vue'\nimport AuiMetadati from './metadati/metadati.vue'\n\n\n\n\n\n\nIl metodo \nimagesList()\n:\n\n\nimagesList () {\n    return _.chain(this.item.representations)\n    .filter(e =>  e.mimetype === 'image/jpeg')\n    .map(e => {\n        return {\n            'url': e.url,\n            'title': e.title\n        }\n    })\n    .value()\n},\n\n\n\n\n\n1.  richiamando la funzione \n_.chain(this.item.representations)\n [...] \n.value()\n verranno restituiti tutti gli elementi solo se saranno in formato .jpeg e che quindi saranno delle immagini (\ne.mimetype === \u2018image/jpeg\u2019\n).  \n\n\n\n\n\n2. richiamando la funzione \n.map\n, a tutti gli elementi della lista di immagini, verranno riportati il corrispondente URL e il titolo.\n\n\n\n\n\n\nIl metodo \ndocList()\n:\n\n\nrichiamando la funzione \n_.chain(this.item.representations)\n [...] \n.value()\n, restituir\u00e0 tutti gli elementi che saranno in un formato diverso da \n.jpeg\n  e che quindi saranno dei documenti (\ne.mimetype !== \u2018image/jpeg\u2019\n).  \n\n\ndocList() {\n    return _.chain(this.item.representations)\n    .filter(e => e.mimetype !== 'image/jpeg')\n    .value()\n},\n\n\n\n\n\n\nIl metodo \nrelSplitted()\n:\n\n\n\n1. riprende le propriet\u00e0 dell\u2019elemento e divide le entit\u00e0 (\nitems\n) dalle relazioni (\nrelateds\n), permettendo di modificare separatamente gli elementi senza che vi siano modifiche anche nelle loro relazioni.\n\n\n\n\nrelSplitted () {\n    return util.splitRelation(this.relateds)\n}\n\n\n\n\nprops: [\n    'item',\n    'relateds'\n],\n\n\n\n\n\n2. richiamando \nservice/util.js\n le entit\u00e0 vengono ordinate secondo una specifica disposizione predisposta.\n\n\n\n\nservice.splitRelation = (relations) => {\n    let splittedRelations = {}\n    let orderEntities =['Autore', 'Autore_secondario', 'Regia', 'Scene', 'Costumi', 'Musiche', 'Interprete', 'Luoghi']\n}\n\n\n\n\n\n3. attraverso il codice \n.html\n mostra le relazioni divise come oggetti (\nrelSplitted.objects\n) verranno mostrate come delle card con immagini; quelle divise come entit\u00e0 (\nrelSplitted.entities\n) verranno mostrate come un elenco che seguir\u00e0 l\u2019ordine imposto dal file \nutil.js\n.\n\n\n\n\n<aui-related v-if=\"relSplitted.objects\" :relateds=\"relSplitted.objects\" :view=\"'images'\"></aui-related>\n<aui-related v-if=\"relSplitted.entities\" :relateds=\"relSplitted.entities\"></aui-related>",
            "title": "detail"
        },
        {
            "location": "/detail/#detail",
            "text": "",
            "title": "Detail"
        },
        {
            "location": "/detail/#descrizione-generale",
            "text": "Il componente \u201cdetail\u201d contiene al suo interno altri componenti:  metadati ,  related  e  spettacoli-view , che contiene al suo interno il componente  locandina . \n\u00c8 la pagina in cui si viene reindirizzati quando si seleziona un elemento della pagina  Cerca  o dalle altre pagine del men\u00f9. \nEsso mostra il nome dell\u2019elemento, una gallery di immagini, una sua descrizione ( metadati ) e gli elementi ad esso collegati ( related ). \nSe si apre un elemento degli spettacoli, viene visualizzata la pagina dell\u2019elemento con una descrizione ( metadati ), e gli elementi correlati sotto forma di  card  e a lato un immagine della locandina dello spettacolo ( spettacoli-view / locandina ) con sotto un elenco degli elementi correlati ( related ).",
            "title": "Descrizione generale"
        },
        {
            "location": "/detail/#comportamenti-specifici",
            "text": "Importa i componenti:  related ,  gallery  e  metadati .    import AuiRelated from './related/related.vue'\nimport AuiGallery from './../gallery/gallery.vue'\nimport AuiMetadati from './metadati/metadati.vue'",
            "title": "Comportamenti specifici"
        },
        {
            "location": "/detail/#il-metodo-imageslist",
            "text": "imagesList () {\n    return _.chain(this.item.representations)\n    .filter(e =>  e.mimetype === 'image/jpeg')\n    .map(e => {\n        return {\n            'url': e.url,\n            'title': e.title\n        }\n    })\n    .value()\n},  \n1.  richiamando la funzione  _.chain(this.item.representations)  [...]  .value()  verranno restituiti tutti gli elementi solo se saranno in formato .jpeg e che quindi saranno delle immagini ( e.mimetype === \u2018image/jpeg\u2019 ).    \n2. richiamando la funzione  .map , a tutti gli elementi della lista di immagini, verranno riportati il corrispondente URL e il titolo.",
            "title": "Il metodo imagesList():"
        },
        {
            "location": "/detail/#il-metodo-doclist",
            "text": "richiamando la funzione  _.chain(this.item.representations)  [...]  .value() , restituir\u00e0 tutti gli elementi che saranno in un formato diverso da  .jpeg   e che quindi saranno dei documenti ( e.mimetype !== \u2018image/jpeg\u2019 ).    docList() {\n    return _.chain(this.item.representations)\n    .filter(e => e.mimetype !== 'image/jpeg')\n    .value()\n},",
            "title": "Il metodo docList():"
        },
        {
            "location": "/detail/#il-metodo-relsplitted",
            "text": "1. riprende le propriet\u00e0 dell\u2019elemento e divide le entit\u00e0 ( items ) dalle relazioni ( relateds ), permettendo di modificare separatamente gli elementi senza che vi siano modifiche anche nelle loro relazioni.  relSplitted () {\n    return util.splitRelation(this.relateds)\n}  props: [\n    'item',\n    'relateds'\n],  \n2. richiamando  service/util.js  le entit\u00e0 vengono ordinate secondo una specifica disposizione predisposta.  service.splitRelation = (relations) => {\n    let splittedRelations = {}\n    let orderEntities =['Autore', 'Autore_secondario', 'Regia', 'Scene', 'Costumi', 'Musiche', 'Interprete', 'Luoghi']\n}  \n3. attraverso il codice  .html  mostra le relazioni divise come oggetti ( relSplitted.objects ) verranno mostrate come delle card con immagini; quelle divise come entit\u00e0 ( relSplitted.entities ) verranno mostrate come un elenco che seguir\u00e0 l\u2019ordine imposto dal file  util.js .  <aui-related v-if=\"relSplitted.objects\" :relateds=\"relSplitted.objects\" :view=\"'images'\"></aui-related>\n<aui-related v-if=\"relSplitted.entities\" :relateds=\"relSplitted.entities\"></aui-related>",
            "title": "Il metodo relSplitted():"
        },
        {
            "location": "/footer/",
            "text": "Footer\n\n\n\n\n\nDescrizione generale\n\n\nIl componente \u201cfooter\u201d \u00e8 un pi\u00e8 di pagina comune a tutte facciate.\n\nEsso mostra il logo del sito e d\u00e0 informazioni generali, sui contatti, sul servizio al pubblico e sui social ad esso associati; quest\u2019ultima categoria presenta dei link per ciascun social: Facebook, Twitter, YouTube e Instagram, che riconducono alla pagina social del sito.  \n\n\nComportamenti specifici\n\n\nIl tag \n<footer>\n, nel codice \n.html\n, avr\u00e0 un contenitore al fondo della pagina che conterr\u00e0 tutte le informazioni generali e, in pi\u00f9, un elenco di link che ricondurr\u00e0 alla pagina di ciascun social.  \n\n\n\n\n<footer id=\"footer\" class=\"row py-4 bg-black text-sm-left text-center\">\n        <div class=\"container\">\n\n\n\n\n\n\n<div class=\"col-md-2 white pb-1\">\n    <h4 class=\"bold upp h6 white\">Seguici su</h4>\n    <ul class=\"social\">\n        <li>\n            <a href=\"#\">Facebook</a>\n        </li>",
            "title": "footer"
        },
        {
            "location": "/footer/#footer",
            "text": "",
            "title": "Footer"
        },
        {
            "location": "/footer/#descrizione-generale",
            "text": "Il componente \u201cfooter\u201d \u00e8 un pi\u00e8 di pagina comune a tutte facciate. \nEsso mostra il logo del sito e d\u00e0 informazioni generali, sui contatti, sul servizio al pubblico e sui social ad esso associati; quest\u2019ultima categoria presenta dei link per ciascun social: Facebook, Twitter, YouTube e Instagram, che riconducono alla pagina social del sito.",
            "title": "Descrizione generale"
        },
        {
            "location": "/footer/#comportamenti-specifici",
            "text": "Il tag  <footer> , nel codice  .html , avr\u00e0 un contenitore al fondo della pagina che conterr\u00e0 tutte le informazioni generali e, in pi\u00f9, un elenco di link che ricondurr\u00e0 alla pagina di ciascun social.",
            "title": "Comportamenti specifici"
        },
        {
            "location": "/gallery/",
            "text": "Gallery\n\n\n\n\n\nDescrizione generale\n\n\nIl componente \u201cgallery\u201d \u00e8 una galleria di immagini contenuta in un elemento dell\u2019archivio.   \n\nSe selezionata, l\u2019immagine essa pu\u00f2, attraverso dei pulsanti mostrati sotto di essa, essere: ingrandita, rimpicciolita, mostrata in scala 1:1, mostrata full-screen, capovolta sia a dx-sx che dall\u2019alto verso il basso e viceversa, ripristinata alla stato iniziale, spostarla dove si vuole e, inoltre, si pu\u00f2 passare all\u2019immagine precedente o successiva.  \n\n\nComportamenti specifici\n\n\nLa gallery acquisisce come input (\nprop\n \u2192 properties) delle immagini che verranno passate al \nViewer\n e visualizzate in slides.  \n\n\ncomponents: {\n    Viewer\n},\nprops: ['images'],\n\n\n\n\n\n\nL\u2019immagine mostrata sar\u00e0 quella precedentemente selezionata dalla galleria di immagini; questa per\u00f2 apparir\u00e0 pi\u00f9 grande dell\u2019immagine originale.  \n\n\n<img v-for=\"item in scope.images\" :src=\"item.url.mediumlarge\" :data-source=\"item.url.original\" :key=\"item.id\">\n\n\n\n\n\n\nL\u2019immagine selezionata dalla gallery verr\u00e0 mostrata secondo la disposizione di alcune opzioni (\nslickOptions\n \u2192 es. \ncenterMode\n, \nslideToShow\n, \nvariableWidth\n...).  \n\n\nslickOptions: {\n    infinite: false,\n    edgeFriction: 0,\n    centerMode: true,\n    slidesToShow: 1,\n    variableWidth: true,\n    waitForAnimate: false,\n    prevArrow: '<span class=\"slick-prev bg-transparent\"><span class=\"fal fa-chevron-left fa-2x white\"></span></span>',\n    nextArrow: '<span class=\"slick-next bg-transparent\"><span class=\"fal fa-chevron-right fa-2x white\"></span></span>',\n    cssEase: 'cubic-bezier(.77,0,.175,1)'\n},\n\n\n\n\n\n\nLe immagini della gallery potranno essere modificate secondo la scelta di alcune opzioni (\noptions\n \u2192 es. \nzoomable\n, \nfullscreen\n...), mostrate come bottoni appartenenti ad una toolbar.\n\nLa funzione \n$emit\n, partendo dal componente, comunica esternamente a tutti gli ascoltatori che se vorranno potranno bloccare l\u2019evento; inoltre ritorner\u00e0 come valore \u201c\nhidden\n\u201d.  \n\n\noptions: {\n    'button': false,\n    'navbar': true,\n    'toolbar': true,\n    'zoomable': true,\n    'transition': false,\n    'fullscreen': false,\n    'keyboard': true,\n    'movable': true,\n    'rotatable': false,\n    'scalable': true,\n    'inline': false,\n    'tooltip': true,\n    'title': true,\n    'flipHorizontal': false,\n    'flipVertical': false,\n    'url': 'data-source',\n    'hidden': () => {\n        this.$emit('hidden')\n    }\n}",
            "title": "gallery"
        },
        {
            "location": "/gallery/#gallery",
            "text": "",
            "title": "Gallery"
        },
        {
            "location": "/gallery/#descrizione-generale",
            "text": "Il componente \u201cgallery\u201d \u00e8 una galleria di immagini contenuta in un elemento dell\u2019archivio.    \nSe selezionata, l\u2019immagine essa pu\u00f2, attraverso dei pulsanti mostrati sotto di essa, essere: ingrandita, rimpicciolita, mostrata in scala 1:1, mostrata full-screen, capovolta sia a dx-sx che dall\u2019alto verso il basso e viceversa, ripristinata alla stato iniziale, spostarla dove si vuole e, inoltre, si pu\u00f2 passare all\u2019immagine precedente o successiva.",
            "title": "Descrizione generale"
        },
        {
            "location": "/gallery/#comportamenti-specifici",
            "text": "La gallery acquisisce come input ( prop  \u2192 properties) delle immagini che verranno passate al  Viewer  e visualizzate in slides.    components: {\n    Viewer\n},\nprops: ['images'],",
            "title": "Comportamenti specifici"
        },
        {
            "location": "/header/",
            "text": "Header\n\n\n\n\n\nDescrizione generale\n\n\nIl componente \u201cheader\u201d \u00e8 l\u2019insieme dei due componenti \nmenupanel\n e \nsearchpanel\n e, del link-immagine che permette il reindirizzamento alla homepage del sito.\n\nL\u2019icona del menupanel apre un men\u00f9 ad 8 voci che condurranno alle relative pagine [figura 1].\n\nL\u2019icona del searchpanel permette l\u2019apertura di una barra di ricerca [figura 1].  \n\nLa sua posizione varia a seconda del dispositivo che si sta utilizzando, lo si trover\u00e0 in alto a sinistra per gli utenti PC (qualsiasi browser), mentre si trover\u00e0 in basso a sinistra per gli utenti Mobile (Tablet e Smartphone).  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[figura 1]  \n\n\n\n\n\n\nComportamenti specifici\n\n\nIl metodo \nopenMenu()\n:\n\n\nopenMenu (){\n    this.$store.commit('searchbar/setOpenSearch', false)\n    this.$store.commit('menu/setOpenMenu', !this.$store.state.menu.isOpen)\n    this.$store.dispatch('showHideScroll', this.$store.state.menu.isOpen)\n},\n\n\n\n\n\n1. effettua una chiamata al metodo \nsetOpenSearch\n (nel \nsearchbar.js\n) e lo pone a \nfalse\n; questo fa in modo che, se il men\u00f9 a 8 voci \u00e8 aperto, non compaia l\u2019icona per la ricerca.\n\n\n\n\n\n2. effettua una chiamata al metodo \nsetOpenMenu\n (nel \nmenu.js\n) e, negando lo stato nel men\u00f9 \nisOpen\n che per default \u00e8 a \nfalse\n, rende \nisOpen\n \ntrue\n; questo permette l\u2019apertura del men\u00f9 a 8 voci al click dell\u2019apposita icona.\n\n\n\n\n\n3. manda allo \nstore\n le azioni del metodo \nshowHideScroll\n e controlla lo stato nel men\u00f9 \nisOpen\n, che per default \u00e8 a \nfalse\n; quindi non permetter\u00e0 la visualizzazione dello \nscrollbar\n a lato pagina quando il men\u00f9 a 8 voci \u00e8 aperto.\n\n\n\n\nIl metodo \nopenSearch()\n:\n\n\nopenSearch (){\n    this.$store.commit('menu/setOpenMenu', false)\n    this.$store.commit('searchbar/setOpenSearch', !this.$store.state.searchbar.isOpen)\n    this.$store.dispatch('showHideScroll', this.$store.state.searchbar.isOpen)\n},\n\n\n\n\n\n1. effettua una chiamata al metodo \nsetOpenMenu\n (nel \nmenu.js\n) e lo pone a \nfalse\n; questo fa in modo che, se la barra di ricerca \u00e8 attiva, venga cambiato lo stato del men\u00f9, senza che l\u2019icona di esso scompaia al click di quella della ricerca.\n\n\n\n\n\n2. effettua una chiamata al metodo \nsetOpenSearch\n (nel \nsearchbar.js\n) e, negando lo stato nella searchbar \nisOpen\n che per default \u00e8 a \nfalse\n, rende \nisOpen\n \ntrue\n; questo permette l\u2019apertura della barra di ricerca al click dell\u2019apposita icona.\n\n\n\n\n\n3. manda allo \nstore\n le azioni del metodo \nshowHideScroll\n e controlla lo stato nella searchbar \nisOpen\n, che per default \u00e8 a \nfalse\n; quindi non permetter\u00e0 la visualizzazione dello scrollbar a lato pagina quando la barra di ricerca \u00e8 attiva.",
            "title": "header"
        },
        {
            "location": "/header/#header",
            "text": "",
            "title": "Header"
        },
        {
            "location": "/header/#descrizione-generale",
            "text": "Il componente \u201cheader\u201d \u00e8 l\u2019insieme dei due componenti  menupanel  e  searchpanel  e, del link-immagine che permette il reindirizzamento alla homepage del sito. \nL\u2019icona del menupanel apre un men\u00f9 ad 8 voci che condurranno alle relative pagine [figura 1]. \nL\u2019icona del searchpanel permette l\u2019apertura di una barra di ricerca [figura 1].   \nLa sua posizione varia a seconda del dispositivo che si sta utilizzando, lo si trover\u00e0 in alto a sinistra per gli utenti PC (qualsiasi browser), mentre si trover\u00e0 in basso a sinistra per gli utenti Mobile (Tablet e Smartphone).           \n[figura 1]",
            "title": "Descrizione generale"
        },
        {
            "location": "/header/#comportamenti-specifici",
            "text": "",
            "title": "Comportamenti specifici"
        },
        {
            "location": "/header/#il-metodo-openmenu",
            "text": "openMenu (){\n    this.$store.commit('searchbar/setOpenSearch', false)\n    this.$store.commit('menu/setOpenMenu', !this.$store.state.menu.isOpen)\n    this.$store.dispatch('showHideScroll', this.$store.state.menu.isOpen)\n},  \n1. effettua una chiamata al metodo  setOpenSearch  (nel  searchbar.js ) e lo pone a  false ; questo fa in modo che, se il men\u00f9 a 8 voci \u00e8 aperto, non compaia l\u2019icona per la ricerca.  \n2. effettua una chiamata al metodo  setOpenMenu  (nel  menu.js ) e, negando lo stato nel men\u00f9  isOpen  che per default \u00e8 a  false , rende  isOpen   true ; questo permette l\u2019apertura del men\u00f9 a 8 voci al click dell\u2019apposita icona.  \n3. manda allo  store  le azioni del metodo  showHideScroll  e controlla lo stato nel men\u00f9  isOpen , che per default \u00e8 a  false ; quindi non permetter\u00e0 la visualizzazione dello  scrollbar  a lato pagina quando il men\u00f9 a 8 voci \u00e8 aperto.",
            "title": "Il metodo openMenu():"
        },
        {
            "location": "/header/#il-metodo-opensearch",
            "text": "openSearch (){\n    this.$store.commit('menu/setOpenMenu', false)\n    this.$store.commit('searchbar/setOpenSearch', !this.$store.state.searchbar.isOpen)\n    this.$store.dispatch('showHideScroll', this.$store.state.searchbar.isOpen)\n},  \n1. effettua una chiamata al metodo  setOpenMenu  (nel  menu.js ) e lo pone a  false ; questo fa in modo che, se la barra di ricerca \u00e8 attiva, venga cambiato lo stato del men\u00f9, senza che l\u2019icona di esso scompaia al click di quella della ricerca.  \n2. effettua una chiamata al metodo  setOpenSearch  (nel  searchbar.js ) e, negando lo stato nella searchbar  isOpen  che per default \u00e8 a  false , rende  isOpen   true ; questo permette l\u2019apertura della barra di ricerca al click dell\u2019apposita icona.  \n3. manda allo  store  le azioni del metodo  showHideScroll  e controlla lo stato nella searchbar  isOpen , che per default \u00e8 a  false ; quindi non permetter\u00e0 la visualizzazione dello scrollbar a lato pagina quando la barra di ricerca \u00e8 attiva.",
            "title": "Il metodo openSearch():"
        },
        {
            "location": "/item-view/",
            "text": "Item-view\n\n\n\n\n\nDescrizione generale\n\n\nIl componente \u201citem-view\u201d contiene al suo interno altri componenti: \ncard-view\n e \nlist-view\n.\n\nMostra i risultati della ricerca, a seconda della scelta che si fa tramite icona, questi verranno visualizzati come elementi \u201c\ncard\n\u201d con una disposizione a \ngriglia\n (se si utilizza il componente \ncard-view\n) oppure come elementi di un \nelenco\n (se si utilizza il componente \nlist-view\n).  \n\n\nComportamenti specifici\n\n\nI suoi comportamenti specifici vanno ricercati nell'utilizzo specifico dei suoi due sotto componenti:  \n\n\n\n\n\n\ncard-view\n\n\n\n\n\n\nlist-view",
            "title": "item-view"
        },
        {
            "location": "/item-view/#item-view",
            "text": "",
            "title": "Item-view"
        },
        {
            "location": "/item-view/#descrizione-generale",
            "text": "Il componente \u201citem-view\u201d contiene al suo interno altri componenti:  card-view  e  list-view . \nMostra i risultati della ricerca, a seconda della scelta che si fa tramite icona, questi verranno visualizzati come elementi \u201c card \u201d con una disposizione a  griglia  (se si utilizza il componente  card-view ) oppure come elementi di un  elenco  (se si utilizza il componente  list-view ).",
            "title": "Descrizione generale"
        },
        {
            "location": "/item-view/#comportamenti-specifici",
            "text": "I suoi comportamenti specifici vanno ricercati nell'utilizzo specifico dei suoi due sotto componenti:      card-view    list-view",
            "title": "Comportamenti specifici"
        },
        {
            "location": "/menupanel/",
            "text": "Menupanel\n\n\n\n\n\nDescrizione generale\n\n\nIl componente \u201cmenupanel\u201d \u00e8 un men\u00f9 che compare quando si clicca sull\u2019apposita icona [figura 1].\n\nPermette gli accessi, tramite 8 voci, alle sezioni: \u201cHome\u201d, \nStagioni\n, \nSpettacoli\n, \nPersone\n, \nTeatri e compagnie\n, \nDocumenti e immagini\n, \nIl Dramma, 1925 - 1983\n  e \nCerca\n, la quale permetter\u00e0 la ricerca, dell\u2019elemento voluto, all\u2019interno dell\u2019archivio.\n\nLa sua posizione varia a seconda del dispositivo che si sta utilizzando, lo si trover\u00e0 in alto a sinistra per gli utenti PC (qualsiasi browser), mentre si trover\u00e0 in basso a sinistra per gli utenti Mobile (Tablet e Smartphone).  \n\n\n\n\n\n\n\n\n\n\n\n\n\n[figura 1]\n\n\n\n\n\n\nComportamenti specifici\n\n\n\n\nAl click della specifica icona si aprir\u00e0, da sinistra verso destra, un men\u00f9 di selezione con le voci sopra citate.  \n\n\nLe voci del men\u00f9 potranno essere modificate tramite WordPress.  \n\n\nLa propriet\u00e0 \nmouseenter\n permetter\u00e0, al passaggio del cursore su un elemento, il cambio del suo sfondo (\nchangeBg\n), mentre quella \nmouseleave\n annuller\u00e0 il cambio di sfondo. Lo sfondo della voce che verr\u00e0 cambiato sar\u00e0 lo stesso della pagina a cui quella voce reindirizza.  \n\n\n\n\n<li v-for=\"item in $store.state.menu.items\">\n    <nuxt-link :to=\"item.url\" v-on:mouseenter.native=\"changeBg(item.attr_title)\" v-on:mouseleave.native=\"currentBg  = null\">\n</li>\n\n\n\n\n\n\nAlla selezione, click, di un elemento della lista si verr\u00e0 reindirizzati alla pagina corrispondente all\u2019elemento desiderato.",
            "title": "menupanel"
        },
        {
            "location": "/menupanel/#menupanel",
            "text": "",
            "title": "Menupanel"
        },
        {
            "location": "/menupanel/#descrizione-generale",
            "text": "Il componente \u201cmenupanel\u201d \u00e8 un men\u00f9 che compare quando si clicca sull\u2019apposita icona [figura 1]. \nPermette gli accessi, tramite 8 voci, alle sezioni: \u201cHome\u201d,  Stagioni ,  Spettacoli ,  Persone ,  Teatri e compagnie ,  Documenti e immagini ,  Il Dramma, 1925 - 1983   e  Cerca , la quale permetter\u00e0 la ricerca, dell\u2019elemento voluto, all\u2019interno dell\u2019archivio. \nLa sua posizione varia a seconda del dispositivo che si sta utilizzando, lo si trover\u00e0 in alto a sinistra per gli utenti PC (qualsiasi browser), mentre si trover\u00e0 in basso a sinistra per gli utenti Mobile (Tablet e Smartphone).         \n[figura 1]",
            "title": "Descrizione generale"
        },
        {
            "location": "/menupanel/#comportamenti-specifici",
            "text": "Al click della specifica icona si aprir\u00e0, da sinistra verso destra, un men\u00f9 di selezione con le voci sopra citate.    Le voci del men\u00f9 potranno essere modificate tramite WordPress.    La propriet\u00e0  mouseenter  permetter\u00e0, al passaggio del cursore su un elemento, il cambio del suo sfondo ( changeBg ), mentre quella  mouseleave  annuller\u00e0 il cambio di sfondo. Lo sfondo della voce che verr\u00e0 cambiato sar\u00e0 lo stesso della pagina a cui quella voce reindirizza.     <li v-for=\"item in $store.state.menu.items\">\n    <nuxt-link :to=\"item.url\" v-on:mouseenter.native=\"changeBg(item.attr_title)\" v-on:mouseleave.native=\"currentBg  = null\">\n</li>   Alla selezione, click, di un elemento della lista si verr\u00e0 reindirizzati alla pagina corrispondente all\u2019elemento desiderato.",
            "title": "Comportamenti specifici"
        },
        {
            "location": "/pagecontainer/",
            "text": "Pagecontainer\n\n\n\n\n\nDescrizione generale\n\n\nIl componente \u201cpagecontainer\u201d \u00e8 un contenitore per i filtri, i risultati della pagina di ricerca, e  le icone per la loro impaginazione (a \ngriglia\n o ad \nelenco\n) che si trova sia in \nArchivio\n che in \nBiblioteca\n.  \n\n\nComportamenti specifici\n\n\nIl metodo \nopenFiler()\n:\n\n\nsetta lo stato del bottone dei filtri a \ntrue\n, verranno quindi visualizzati i filtri, manda allo \nstore\n le azioni del metodo \nshowHideScroll\n (\n.dispatch\n) e permette la visualizzazione dello scrollbar a lato pagina quando i filtri sono attivi.  \n\n\nopenFilter () {\n    this.isOpen = !this.isOpen\n    this.$store.dispatch('showHideScroll', this.isOpen)\n}",
            "title": "pagecontainer"
        },
        {
            "location": "/pagecontainer/#pagecontainer",
            "text": "",
            "title": "Pagecontainer"
        },
        {
            "location": "/pagecontainer/#descrizione-generale",
            "text": "Il componente \u201cpagecontainer\u201d \u00e8 un contenitore per i filtri, i risultati della pagina di ricerca, e  le icone per la loro impaginazione (a  griglia  o ad  elenco ) che si trova sia in  Archivio  che in  Biblioteca .",
            "title": "Descrizione generale"
        },
        {
            "location": "/pagecontainer/#comportamenti-specifici",
            "text": "",
            "title": "Comportamenti specifici"
        },
        {
            "location": "/pagecontainer/#il-metodo-openfiler",
            "text": "setta lo stato del bottone dei filtri a  true , verranno quindi visualizzati i filtri, manda allo  store  le azioni del metodo  showHideScroll  ( .dispatch ) e permette la visualizzazione dello scrollbar a lato pagina quando i filtri sono attivi.    openFilter () {\n    this.isOpen = !this.isOpen\n    this.$store.dispatch('showHideScroll', this.isOpen)\n}",
            "title": "Il metodo openFiler():"
        },
        {
            "location": "/preview/",
            "text": "Preview\n\n\n\n\n\nDescrizione generale\n\n\nIl componente \u201cpreview\u201d, attraverso il click di uno specifico bottone [figura 1] sull\u2019elemento desiderato, mostra un\u2019anteprima delle immagini della gallery di quell\u2019elemento.\n\nIn caso di pi\u00f9 immagini \u00e8 possibile scorrerle attraverso due frecce direzionali ai lati di esse.\n\nViene inoltre mostrato, per ciascuna immagine, il titolo che ad essa \u00e8 stato assegnato; affianco a questo attraverso il click del bottone \u201c\nVAI ALLA SCHEDA >\n\u201d si viene reindirizzati alla scheda in cui \u00e8 contenuta l\u2019immagine che si stava visualizzando.  \n\n\n\n\n\n\n\n\n\n\n\n\n\n[figura 1]  \n\n\n\n\n\n\nComportamenti specifici\n\n\nAttraverso l\u2019oggetto \nslickOptiond\n vengono definite le propriet\u00e0 dell\u2019immagine di anteprima. Per esempio, verr\u00e0 mostrata una sola immagine alla volta (\nslidesToShow: 1\n) che sar\u00e0 centrata nella schermata (\ncenterMode: true\n); le immagini non avranno tutte la stessa grandezza (\nvariableWidth: true\n) e saranno presenti, ai lati dell\u2019immagine, due frecce per passare all\u2019immagine precedente o successiva (\nprevArrow e nextArrow\n).  \n\n\nslickOptions: {\n    infinite: false,\n    edgeFriction: 0,\n    centerMode: true,\n    slidesToShow:1 ,\n    variableWidth: true,\n    waitForAnimate: false,\n    prevArrow: '<span class =\"slick-prev bg-transparent\"><span class=\"fal fa-chevron-left fa-2x white\"></span></span>',\n    nextArrow: '<span class =\"slick-next bg-transparent\"><span class=\"fal fa-chevron-right fa-2x white\"></span></span>',\n    cssEase: 'cubic-bezier(.77,0,.175,1)'\n},\n\n\n\n\n\n\n\n\nimagesLst: _.map(this.images, (e) => {\n    var result = {\n        href: e.url,\n        title: e.title\n    }\n\n    result.type = /mp4$/.test(e.url) ? 'video/mp4' : ''\n\n    if(/youtube\\.com/.test(e.url)){\n        result.type = 'text/html'\n        result.youtube = _.split(e.url, '?v=')[1]\n    }\n\n    return result\n})\n\n\n\n\n\n1. Per ogni immagine della preview, vengono assegnati il corrispondente \nURL\n e \ntitolo\n alle rispettive propriet\u00e0 (\nhref\n e \ntitle\n) della variabile \nresult\n; questa verr\u00e0 restituita alla fine.\n\n\n\n\n\n2. Se il tipo della variabile \nresult\n corrisponde ad un URL di un file \n.mp4\n (\n.test function\n) allora, verr\u00e0 restituita la stringa \n\u2018video/mp4\u2019\n, altrimenti restituir\u00e0 una stringa vuota.\n\n\n\n\n\n3. Viene testato se l\u2019URL in questione \u00e8 un URL appartenente a YouTube, al tipo della variabile \nresult\n viene detto che \u00e8 un \n\u2018text/html\u2019\n e per ogni \n\u2018?v=\u2019\n all\u2019interno dell\u2019URL verr\u00e0 sostituita una virgola. Alla fine verr\u00e0 restituita la variabile \nresult\n.",
            "title": "preview"
        },
        {
            "location": "/preview/#preview",
            "text": "",
            "title": "Preview"
        },
        {
            "location": "/preview/#descrizione-generale",
            "text": "Il componente \u201cpreview\u201d, attraverso il click di uno specifico bottone [figura 1] sull\u2019elemento desiderato, mostra un\u2019anteprima delle immagini della gallery di quell\u2019elemento. \nIn caso di pi\u00f9 immagini \u00e8 possibile scorrerle attraverso due frecce direzionali ai lati di esse. \nViene inoltre mostrato, per ciascuna immagine, il titolo che ad essa \u00e8 stato assegnato; affianco a questo attraverso il click del bottone \u201c VAI ALLA SCHEDA > \u201d si viene reindirizzati alla scheda in cui \u00e8 contenuta l\u2019immagine che si stava visualizzando.         \n[figura 1]",
            "title": "Descrizione generale"
        },
        {
            "location": "/preview/#comportamenti-specifici",
            "text": "Attraverso l\u2019oggetto  slickOptiond  vengono definite le propriet\u00e0 dell\u2019immagine di anteprima. Per esempio, verr\u00e0 mostrata una sola immagine alla volta ( slidesToShow: 1 ) che sar\u00e0 centrata nella schermata ( centerMode: true ); le immagini non avranno tutte la stessa grandezza ( variableWidth: true ) e saranno presenti, ai lati dell\u2019immagine, due frecce per passare all\u2019immagine precedente o successiva ( prevArrow e nextArrow ).    slickOptions: {\n    infinite: false,\n    edgeFriction: 0,\n    centerMode: true,\n    slidesToShow:1 ,\n    variableWidth: true,\n    waitForAnimate: false,\n    prevArrow: '<span class =\"slick-prev bg-transparent\"><span class=\"fal fa-chevron-left fa-2x white\"></span></span>',\n    nextArrow: '<span class =\"slick-next bg-transparent\"><span class=\"fal fa-chevron-right fa-2x white\"></span></span>',\n    cssEase: 'cubic-bezier(.77,0,.175,1)'\n},",
            "title": "Comportamenti specifici"
        },
        {
            "location": "/scrolltotop/",
            "text": "Scrolltotop\n\n\n\n\n\nDescrizione generale\n\n\nIl componente \u201cscrolltotop\u201d \u00e8 un\u2019icona [figura 1] con una freccia che punta verso l\u2019alto (\n\u2191\n) che, viene visualizzata solo se ci si trova oltre il doppio dell\u2019altezza della schermata e permette, se selezionato, di risalire alla testa della pagina.  \n\n\n\n\n\n\n\n\n\n\n\n\n\n[figura 1]  \n\n\n\n\n\n\nComportamenti specifici\n\n\nUtilizza la libreria esterna \njquery\n.  \n\n\n\n\nIl metodo \ndata()\n:\n\n\nritorna \nfalse\n e quindi non rende visibile il componente, se ci si trova a meno del doppio dell\u2019altezza della schermata.  \n\n\nexport default {\n    data () {\n        return {\n            isVisible: false\n        }\n    },\n\n\n\n\n\n\nIl metodo \nbeforeMount()\n:\n\n\nallega al gestore di eventi, window (la nostra finestra), l\u2019evento creatosi nel metodo \nhandScroll()\n.  \n\n\nbeforeMount () {\n    window.addEventListener('scroll', this.handleScroll)\n},\n\n\n\n\n\n\nIl metodo \nscrollTop()\n:\n\n\nassegna ad una variabile \nbody\n il relativo \nbody HTML\n e l\u2019elemento di scroll permette di ritornare all\u2019inizio della pagina in 500ms con una funzione di andamento (\nswing\n) da usare per la transizione.  \n\n\nscrollTop () {\n    var body = $('html, body')\n    body.stop().animate({\n        scrollTop: 0\n    }, 500, 'swing')\n},\n\n\n\n\n\n\nIl metodo \nhandleScroll()\n:\n\n\nevento \u2192 il componente viene visualizzato se la parte di schermata su cui si si trova \u00e8 maggiore del doppio dell\u2019altezza della schermata.  \n\n\nhandleScroll () {\n    this.isVisible = window.pageYOffset > (window.innerHeight * 2)\n}",
            "title": "scrolltotop"
        },
        {
            "location": "/scrolltotop/#scrolltotop",
            "text": "",
            "title": "Scrolltotop"
        },
        {
            "location": "/scrolltotop/#descrizione-generale",
            "text": "Il componente \u201cscrolltotop\u201d \u00e8 un\u2019icona [figura 1] con una freccia che punta verso l\u2019alto ( \u2191 ) che, viene visualizzata solo se ci si trova oltre il doppio dell\u2019altezza della schermata e permette, se selezionato, di risalire alla testa della pagina.         \n[figura 1]",
            "title": "Descrizione generale"
        },
        {
            "location": "/scrolltotop/#comportamenti-specifici",
            "text": "Utilizza la libreria esterna  jquery .",
            "title": "Comportamenti specifici"
        },
        {
            "location": "/scrolltotop/#il-metodo-data",
            "text": "ritorna  false  e quindi non rende visibile il componente, se ci si trova a meno del doppio dell\u2019altezza della schermata.    export default {\n    data () {\n        return {\n            isVisible: false\n        }\n    },",
            "title": "Il metodo data():"
        },
        {
            "location": "/scrolltotop/#il-metodo-beforemount",
            "text": "allega al gestore di eventi, window (la nostra finestra), l\u2019evento creatosi nel metodo  handScroll() .    beforeMount () {\n    window.addEventListener('scroll', this.handleScroll)\n},",
            "title": "Il metodo beforeMount():"
        },
        {
            "location": "/scrolltotop/#il-metodo-scrolltop",
            "text": "assegna ad una variabile  body  il relativo  body HTML  e l\u2019elemento di scroll permette di ritornare all\u2019inizio della pagina in 500ms con una funzione di andamento ( swing ) da usare per la transizione.    scrollTop () {\n    var body = $('html, body')\n    body.stop().animate({\n        scrollTop: 0\n    }, 500, 'swing')\n},",
            "title": "Il metodo scrollTop():"
        },
        {
            "location": "/scrolltotop/#il-metodo-handlescroll",
            "text": "evento \u2192 il componente viene visualizzato se la parte di schermata su cui si si trova \u00e8 maggiore del doppio dell\u2019altezza della schermata.    handleScroll () {\n    this.isVisible = window.pageYOffset > (window.innerHeight * 2)\n}",
            "title": "Il metodo handleScroll():"
        },
        {
            "location": "/searchpanel/",
            "text": "Searchpanel\n\n\n\n\n\nDescrizione generale\n\n\nIl componente \u201csearchpanel\u201d \u00e8 una barra di ricerca che compare solo quando si clicca sull\u2019apposita icona [figura 1]. \n\nPermette la ricerca, attraverso inserimento manuale dell\u2019elemento voluto, all\u2019interno dell\u2019archivio.\n\nLa sua posizione varia a seconda del dispositivo che si sta utilizzando, lo si trover\u00e0 in alto a sinistra per gli utenti PC (qualsiasi browser), mentre si trover\u00e0 in basso a sinistra per gli utenti Mobile (Tablet e Smartphone).  \n\n\n\n\n\n\n\n\n\n\n\n\n\n[figura 1]  \n\n\n\n\n\n\nComportamenti specifici\n\n\nAl click della specifica icona [figura 2] si aprir\u00e0, da sinistra verso destra, una barra di ricerca e avverr\u00e0 un cambio di icona che, se selezionata, chiuder\u00e0 la barra di ricerca.  \n\n\n\n\n\n\n\n\n\n\n\n\n\n[figura 2]  \n\n\n\n\n\n\n\n\nNella barra di ricerca sar\u00e0 presente la scritta \u201c\nInizia a cercare\u2026\n\u201d.  \n\n\nplaceholder: 'inizia a cercare\u2026'\n\n\n\n\n\n\n\n\nLa ricerca viene effettuata secondo una \u201c\nquery\n\u201d. Ossia tramite l\u2019estrazione di \ntags\n (la/e parola/e cercata/e), che soddisfano un certo criterio di ricerca, da un \ndatabase\n (l\u2019elenco degli elementi dell\u2019archivio).  \n\n\ngoTo () {\n    this.$router.push({ name: 'cerca', query: { tags: this.search } })\n},\n\n\n\n\n\n\nAl click sull\u2019icona di ricerca verranno visualizzati gli elementi correlati alla ricerca, questo grazie al richiamo del metodo \ngoTo()\n, che avvia la ricerca se si clicca il bottone.  \n\n\n<button type=\"button\" class=\"btn\" @click.prevent=\"goTo()\">\n\n\n\n\n\n\nAl click sull\u2019icona di chiusura della ricerca verr\u00e0 chiusa la barra di ricerca, tornando allo stato iniziale; questo grazie al richiamo del metodo \ncloseMenu()\n che, se si d\u00e0 l\u2019input di chiusura, porr\u00e0 come \nfalse\n (chiuso) lo stato della barra di ricerca.  \n\n\n<input type=\"text\" v-model=\"search\" @keyup.esc=\"closeMenu()\" :placeholder=\"placeholder\">",
            "title": "searchpanel"
        },
        {
            "location": "/searchpanel/#searchpanel",
            "text": "",
            "title": "Searchpanel"
        },
        {
            "location": "/searchpanel/#descrizione-generale",
            "text": "Il componente \u201csearchpanel\u201d \u00e8 una barra di ricerca che compare solo quando si clicca sull\u2019apposita icona [figura 1].  \nPermette la ricerca, attraverso inserimento manuale dell\u2019elemento voluto, all\u2019interno dell\u2019archivio. \nLa sua posizione varia a seconda del dispositivo che si sta utilizzando, lo si trover\u00e0 in alto a sinistra per gli utenti PC (qualsiasi browser), mentre si trover\u00e0 in basso a sinistra per gli utenti Mobile (Tablet e Smartphone).         \n[figura 1]",
            "title": "Descrizione generale"
        },
        {
            "location": "/searchpanel/#comportamenti-specifici",
            "text": "Al click della specifica icona [figura 2] si aprir\u00e0, da sinistra verso destra, una barra di ricerca e avverr\u00e0 un cambio di icona che, se selezionata, chiuder\u00e0 la barra di ricerca.         \n[figura 2]",
            "title": "Comportamenti specifici"
        },
        {
            "location": "/sticky/",
            "text": "Sticky\n\n\n\n\n\nDescrizione generale\n\n\nIl componente \u201csticky\u201d permette che, successivamente allo scroll verso il basso della pagina, l\u2019elemento a cui \u00e8 associato rimanga incollato in cima alla schermata visualizzata dell\u2019utente.\n\nNella pagina cerca (\nArchivio\n) comprende: i bottoni (\u201c\n<\n\u201d e \u201c\n>\n\u201d) per la visualizzazione successiva o precedente delle pagine dei risultati e le icone per la loro visualizzazione a \ngriglia\n o a \nelenco\n.\n\nNelle altre pagine del menu a comparsa, escluse Home e \nCerca\n, \u00e8 l\u2019insieme di \ndate\n o le \nlettere alfabetiche\n che, se selezionate, permettono lo scorrimento della pagina fino alla sezione corrispondente.  \n\n\nComportamenti specifici\n\n\nImporta la libreria \nstickybits\n e la applica all\u2019elemento aggiungendogli il tag \n<aui-sticky>\n \n</aui-sticky>\n nel codice \n.htlm\n; questo far\u00e0 in modo che l\u2019elemento rimanga incollato in cima alla schermata anche durante lo scroll verso il basso.  \n\n\nimport stickybits from 'stickybits'\n\n\n\n\n\n\n<aui-sticky class= \"bg-white row\" v-if=\"nav !== 'none'\">   [...]   </aui-sticky>\n\n\n\n\n\n\n\n\n\n\n<aui-sticky class= \"col-md-12 resultnavi mb-b\">   [...]   </aui-sticky>",
            "title": "sticky"
        },
        {
            "location": "/sticky/#sticky",
            "text": "",
            "title": "Sticky"
        },
        {
            "location": "/sticky/#descrizione-generale",
            "text": "Il componente \u201csticky\u201d permette che, successivamente allo scroll verso il basso della pagina, l\u2019elemento a cui \u00e8 associato rimanga incollato in cima alla schermata visualizzata dell\u2019utente. \nNella pagina cerca ( Archivio ) comprende: i bottoni (\u201c < \u201d e \u201c > \u201d) per la visualizzazione successiva o precedente delle pagine dei risultati e le icone per la loro visualizzazione a  griglia  o a  elenco . \nNelle altre pagine del menu a comparsa, escluse Home e  Cerca , \u00e8 l\u2019insieme di  date  o le  lettere alfabetiche  che, se selezionate, permettono lo scorrimento della pagina fino alla sezione corrispondente.",
            "title": "Descrizione generale"
        },
        {
            "location": "/sticky/#comportamenti-specifici",
            "text": "Importa la libreria  stickybits  e la applica all\u2019elemento aggiungendogli il tag  <aui-sticky>   </aui-sticky>  nel codice  .htlm ; questo far\u00e0 in modo che l\u2019elemento rimanga incollato in cima alla schermata anche durante lo scroll verso il basso.    import stickybits from 'stickybits'",
            "title": "Comportamenti specifici"
        },
        {
            "location": "/box/",
            "text": "Box\n\n\n\n\n\n\n\n\n\n\u00c8 un contenitore per la \nnumerazione decennale\n o per le \nstagioni\n con i rispettivi elementi mostrati in formato \u201c\ncard\n\u201d.  \n\n\n\n\n\n\n\n\nRichiama il componente: \ncard-view\n.  \n\n\n\n\nimport AuiCard from '~/components/item-view/card-view/card.vue'\n\n\n\n\n\n\n\n\nPrende in input solo la propriet\u00e0 \ndata\n.  \n\n\n\n\nprops: [\n    'data'\n]",
            "title": "box"
        },
        {
            "location": "/box/#box",
            "text": "",
            "title": "Box"
        },
        {
            "location": "/browsebar/",
            "text": "Browsebar\n\n\n\n\n\n\n\n\n\n\u00c8 una barra di ricerca, con spazio sottostante, nelle pagine: \nDocumenti e immagini\n, \nIl Dramma\n, \nPersone\n, \nSpettacoli\n, \nStagioni\n e \nTeatri e Compagnie\n.  \n\n\n\n\n\n\n\n\nPrende in input solo la propriet\u00e0 \nvalue\n.  \n\n\n\n\nprops: [\n    'value'\n]",
            "title": "browsebar"
        },
        {
            "location": "/browsebar/#browsebar",
            "text": "",
            "title": "Browsebar"
        },
        {
            "location": "/browsefilter/",
            "text": "Browsefilter\n\n\n\n\n\n\n\n\n\n\u00c8 un filtro sticky per l\u2019insieme di \ndate\n o le \nlettere alfabetiche\n che, se selezionate, permettono lo scorrimento della pagina fino alla sezione corrispondente.  \n\n\n\n\n\n\n\n\nRichiama il componente: \nsticky\n.  \n\n\n\n\nimport AuiSticky from '~/components/sticky/sticky.vue'\n\n\n\n\n\n\n\n\nPrende in input le propriet\u00e0 \ndata\n e \nnav\n.  \n\n\n\n\nprops: [\n    'data',\n    'nav'\n],\n\n\n\n\n\n\n\n\nRitorna in output un nuovo array contenente gli elementi dell\u2019oggetto \nchars\n in cui \u00e8 richiamato \n[].concat.apply()\n.\n\nAttraverso il comando \nString.fromCharCode\n, per ogni posizione dell\u2019array viene assegnata, alla variabile \nchar\n, una stringa in un carattere del \ncodice UTF-16\n corrispondente alla somma di 65 alla corrente posizione nell\u2019array.  \n\n\n\n\nchars () {\n    return [].concat.apply([], Array(26))\n    .map((e, i) => {\n        let char = String.fromCharCode(i + 65)\n        return{\n            'val': char,\n            'available': _.find(this.data, e => {\n                return e.id === char && e.items.length > 0\n            })\n        }\n    })\n},\n\n\n\n\n\n\n\n\nAssegna ad una variabile \nstartDecade\n un primo valore e ritorna in output un nuovo array contenente gli elementi dell\u2019oggetto \ndates\n in cui \u00e8 richiamato \n[].concat.apply()\n.\n\nPer ogni posizione dell\u2019array viene trasformata \nstartDecade\n in una Stringa e assegnata ad una variabile \ndecade\n, successivamente assegnata alla propriet\u00e0 \nval\n e, al valore corrente in \nstartDecade\n viene aggiunta una decina.  \n\n\n\n\ndates () {\n    let startDecade = 1920\n    return [].concat.apply([], Array(11))\n      .map((e, i) => {\n        let decade = String(startDecade)\n        startDecade = startDecade + 10\n        return {\n            'val': decade,\n            'available': _.find(this.data, e => {\n                return e.id === decade && e.items.length > 0\n            })\n        }\n    })\n}",
            "title": "browsefilter"
        },
        {
            "location": "/browsefilter/#browsefilter",
            "text": "",
            "title": "Browsefilter"
        },
        {
            "location": "/list/",
            "text": "List\n\n\n\n\n\n\n\n\n\n\u00c8 un contenitore per la \nnumerazione decennale\n, le \nstagioni\n o \nl\u2019ordine alfabetico\n con i rispettivi elementi mostrati in formato \u201c\nelenco\n\u201d.  \n\n\n\n\n\n\n\n\nRichiama il componente: \nlist-view\n.  \n\n\n\n\nimport AuiList from '~/components/item-view/list-view/list.vue'\n\n\n\n\n\n\n\n\nPrende in input solo la propriet\u00e0 \ndata\n.  \n\n\n\n\nprops: [\n    'data'\n]",
            "title": "list"
        },
        {
            "location": "/list/#list",
            "text": "",
            "title": "List"
        },
        {
            "location": "/filterbar/",
            "text": "Filterbar\n\n\n\n\n\n\n\nSono i filtri della sezione \nArchivio\n.  \n\n\n\n\n\n\nClonando il datepicker in filtriData, permette di aggiungere un filtro per range di date gi\u00e0 predisposto dal framework Vue.js.  \n\n\n\n\ndatepicker: _.clone(this.filtriData),\n\n\n\n\nIl metodo \nfiltriConSelezione()\n:\n\n\neseguir\u00e0, per tutti i filtri dell\u2019\nArchivio\n, una funzione che assegner\u00e0 ad ogni figlio, del filtro in analisi, la propriet\u00e0 \n.selected\n, questa dir\u00e0 che il filtro \u00e8 gi\u00e0 stato selezionato e restituir\u00e0 a \nfiltriConSelezione\n tutti i filtri con il campo \n.selected\n aggiunto.  \n\n\nfiltriConSelezione (){\n    return _.map(this.filtri, (filtro) => {\n        filtro.children = _.map(filtro.children, (child) => {\n            child.selected = Boolean(_.find(this.filtriSelezionati, item => item.id === child.data.it))\n            return child\n        })\n        return filtro\n    })\n},\n\n\n\n\n\n\nIl metodo \nfiltroMedia()\n:\n\n\nricerca gli elementi che hanno, come valore della propriet\u00e0 \nname\n, \n\u2018Con media\u2019\n, se esistono tali elementi ritorna una variabile \nbooleana\n a \ntrue\n.  \n\n\nfiltroMedia (){\n    return Boolean(_.find(this.filtriSelezionati, {'name': 'Con media'}))\n}\n\n\n\n\n\n\nIl metodo getMedia():\n\n\ncontrolla se il filtro selezionato ha elementi con media al loro interno allora mantiene il filtro nell\u2019elenco dei filtri (\nsetFiltro\n), altrimenti rimuove quel filtro dall\u2019elenco (\nremoveFiltro\n).  \n\n\ngetMedia (e){\n    if(e.target.checked){\n        this.$emit('setFiltro', { 'id': '1a1f0b26aed8e2066e42b02e13dd10f4', 'name': 'Con media' })\n    }else {\n        this.$emit('removeFiltro', { 'id': '1a1f0b26aed8e2066e42b02e13dd19f4', 'name': 'Con media' })\n    }\n},",
            "title": "filterbar"
        },
        {
            "location": "/filterbar/#filterbar",
            "text": "",
            "title": "Filterbar"
        },
        {
            "location": "/filterbar/#il-metodo-filtriconselezione",
            "text": "eseguir\u00e0, per tutti i filtri dell\u2019 Archivio , una funzione che assegner\u00e0 ad ogni figlio, del filtro in analisi, la propriet\u00e0  .selected , questa dir\u00e0 che il filtro \u00e8 gi\u00e0 stato selezionato e restituir\u00e0 a  filtriConSelezione  tutti i filtri con il campo  .selected  aggiunto.    filtriConSelezione (){\n    return _.map(this.filtri, (filtro) => {\n        filtro.children = _.map(filtro.children, (child) => {\n            child.selected = Boolean(_.find(this.filtriSelezionati, item => item.id === child.data.it))\n            return child\n        })\n        return filtro\n    })\n},",
            "title": "Il metodo filtriConSelezione():"
        },
        {
            "location": "/filterbar/#il-metodo-filtromedia",
            "text": "ricerca gli elementi che hanno, come valore della propriet\u00e0  name ,  \u2018Con media\u2019 , se esistono tali elementi ritorna una variabile  booleana  a  true .    filtroMedia (){\n    return Boolean(_.find(this.filtriSelezionati, {'name': 'Con media'}))\n}",
            "title": "Il metodo filtroMedia():"
        },
        {
            "location": "/filterbar/#il-metodo-getmedia",
            "text": "controlla se il filtro selezionato ha elementi con media al loro interno allora mantiene il filtro nell\u2019elenco dei filtri ( setFiltro ), altrimenti rimuove quel filtro dall\u2019elenco ( removeFiltro ).    getMedia (e){\n    if(e.target.checked){\n        this.$emit('setFiltro', { 'id': '1a1f0b26aed8e2066e42b02e13dd10f4', 'name': 'Con media' })\n    }else {\n        this.$emit('removeFiltro', { 'id': '1a1f0b26aed8e2066e42b02e13dd19f4', 'name': 'Con media' })\n    }\n},",
            "title": "Il metodo getMedia():"
        },
        {
            "location": "/filterbarbib/",
            "text": "Filterbarbiblioteca\n\n\n\n\n\n\n\n\n\nSono i filtri della sezione \nBiblioteca\n.  \n\n\n\n\nLa funzione \ngeneraOptions()\n:\n\n\nprende come parametri una \nlista\n (\nfiltri\n) e una \ntipologia\n (\ntipologiaObject\n o \nAutore\n) passate dal metodo \ndata()\n.\n\n A seconda della tipologia, ricerca tra tutti gli elementi della lista passata (tra tutti i \nfiltri\n) quelli della stessa tipologia e ne ritorna un elenco (la variabile \nitems\n) ordinato per nome (\nordine alfabetico\n).  \n\n\nfunction generaOptions (lista, tipologia) {\n    let items = _.find(lista, item => item.data.path === tipologia)\n    return items ? _.chain(items.children).map(item => item.data).orderBy('name').value() : []\n}\n\n\n\n\n\n\nLa funzione \nselezionaOptions()\n:\n\n\nprende come parametri la raccolta delle \noptions\n (\ngeneriOptions\n e \nautoriOptions\n) e i filtri selezionati.\n\n Restituisce il primo elemento nella collezione \noptions\n che abbia un \nid\n corrisponde all\u2019\nid dei filtri selezionati\n (\nchild.id\n), se \u00e8 presente restituir\u00e0 \ntrue\n e quindi l\u2019elemento.  \n\n\nfunction selezionaOptions (options, selezionati) {\n    return _.find(options, (item) => {\n        return _.some(selezionati, child => child.id === item.id)\n    })\n}\n\n\n\n\n\n\nIl \nmetodo data()\n:\n\n\nrichiama al suo interno,  due volte, la funzione \ngeneraOptions\n, passandogli la lista di filtri e le tipologie: \ntipologiaObject\n e \nAutore\n; ciascuna delle due volte, in cui viene richiamata, assegner\u00e0 il parametro che essa ritorna a una nuova variabile (\ngeneriOptions\n, \nautoriOptions\n).\n\n Il metodo richiama, inoltre, la funzione \nselezionaOptions\n passandogli le due variabili/opzioni ottenute precedentemente: \ngeneriOptions\n e \nautoriOtions\n e, i \nfiltriSelezionati\n. Assegna quindi, ciascuna delle due volte in cui viene richiamata, il parametro che essa ritorna a una nuova variabile (\ngenere\n, \nautore\n).\n\n Il metodo restituisce infine queste quattro variabili (gli elenchi di filtri per genere e autore e, il genere e l\u2019autore selezionati dall\u2019elenco) e le variabili \nsoggettoInterno\n e \ntitoloInterno\n, a cui vengono assegnate, rispettivamente, il soggetto e il titolo presi in input perch\u00e9 inseriti manualmente dall\u2019utente.  \n\n\ndata () {\n    let generiOptions = generaOptions(this.filtri, '/tipologiaObject')\n    let autoriOptions = generaOptions(this.filtri, '/Autore')\n    let genere = selezionaOptions(generiOptions, this.filtriSelezionati)\n    let autore = selezionaOptions(autoriOptions, this.filtriSelezionati)\n    return{\n        generiOptions,\n        autoriOptions,\n        genere,\n        autore,\n        soggettoInterno: this.soggetto,\n        titoloInterno: this.titolo\n    }\n},\n\n\n\n\n\n\nIl metodo \nfiltra()\n:\n\n\nrichiama, come ascoltatore, il metodo \nsetAdvSearch\n e gli passa come parametri: \ngenere\n, \nautore\n, \nsoggetto\n e \ntitolo\n.  \n\n\nmethods: {\n    filtra (){\n        this.$emit('setAdvSearch', {\n            genere: this.genere,\n            autore: this.autore,\n            soggetto: this.soggettoInterno,\n            titolo: this.titoloInterno\n        })\n    }\n}",
            "title": "filterbarbiblioteca"
        },
        {
            "location": "/filterbarbib/#filterbarbiblioteca",
            "text": "",
            "title": "Filterbarbiblioteca"
        },
        {
            "location": "/filterbarbib/#la-funzione-generaoptions",
            "text": "prende come parametri una  lista  ( filtri ) e una  tipologia  ( tipologiaObject  o  Autore ) passate dal metodo  data() . \n A seconda della tipologia, ricerca tra tutti gli elementi della lista passata (tra tutti i  filtri ) quelli della stessa tipologia e ne ritorna un elenco (la variabile  items ) ordinato per nome ( ordine alfabetico ).    function generaOptions (lista, tipologia) {\n    let items = _.find(lista, item => item.data.path === tipologia)\n    return items ? _.chain(items.children).map(item => item.data).orderBy('name').value() : []\n}",
            "title": "La funzione generaOptions():"
        },
        {
            "location": "/filterbarbib/#la-funzione-selezionaoptions",
            "text": "prende come parametri la raccolta delle  options  ( generiOptions  e  autoriOptions ) e i filtri selezionati. \n Restituisce il primo elemento nella collezione  options  che abbia un  id  corrisponde all\u2019 id dei filtri selezionati  ( child.id ), se \u00e8 presente restituir\u00e0  true  e quindi l\u2019elemento.    function selezionaOptions (options, selezionati) {\n    return _.find(options, (item) => {\n        return _.some(selezionati, child => child.id === item.id)\n    })\n}",
            "title": "La funzione selezionaOptions():"
        },
        {
            "location": "/filterbarbib/#il-metodo-data",
            "text": "richiama al suo interno,  due volte, la funzione  generaOptions , passandogli la lista di filtri e le tipologie:  tipologiaObject  e  Autore ; ciascuna delle due volte, in cui viene richiamata, assegner\u00e0 il parametro che essa ritorna a una nuova variabile ( generiOptions ,  autoriOptions ). \n Il metodo richiama, inoltre, la funzione  selezionaOptions  passandogli le due variabili/opzioni ottenute precedentemente:  generiOptions  e  autoriOtions  e, i  filtriSelezionati . Assegna quindi, ciascuna delle due volte in cui viene richiamata, il parametro che essa ritorna a una nuova variabile ( genere ,  autore ). \n Il metodo restituisce infine queste quattro variabili (gli elenchi di filtri per genere e autore e, il genere e l\u2019autore selezionati dall\u2019elenco) e le variabili  soggettoInterno  e  titoloInterno , a cui vengono assegnate, rispettivamente, il soggetto e il titolo presi in input perch\u00e9 inseriti manualmente dall\u2019utente.    data () {\n    let generiOptions = generaOptions(this.filtri, '/tipologiaObject')\n    let autoriOptions = generaOptions(this.filtri, '/Autore')\n    let genere = selezionaOptions(generiOptions, this.filtriSelezionati)\n    let autore = selezionaOptions(autoriOptions, this.filtriSelezionati)\n    return{\n        generiOptions,\n        autoriOptions,\n        genere,\n        autore,\n        soggettoInterno: this.soggetto,\n        titoloInterno: this.titolo\n    }\n},",
            "title": "Il metodo data():"
        },
        {
            "location": "/filterbarbib/#il-metodo-filtra",
            "text": "richiama, come ascoltatore, il metodo  setAdvSearch  e gli passa come parametri:  genere ,  autore ,  soggetto  e  titolo .    methods: {\n    filtra (){\n        this.$emit('setAdvSearch', {\n            genere: this.genere,\n            autore: this.autore,\n            soggetto: this.soggettoInterno,\n            titolo: this.titoloInterno\n        })\n    }\n}",
            "title": "Il metodo filtra():"
        },
        {
            "location": "/result/",
            "text": "Result\n\n\n\n\n\n\n\n\u00c8 la pagina che mostra tutti gli elementi risultati dalla ricerca, attraverso la barra di ricerca e i filtri.  \n\n\n\n\n\n\nRichiama i componenti: \nsticky\n, \ncard-view\n e \nlist-view\n.  \n\n\n\n\nimport AuiSticky from '~/components/sticky/sticky.vue'\nimport AuiCardView from'~/components/item-view/card_view/card.vue'\nimport AuiListView from '~/components/item-view/list-view/list.vue'\n\n\n\n\n\n\nIl metodo \nnext()\n:\n\n\nrichiama una funzione che controlla se il numero di \nskip\n (\npassaggi alla pagina successiva\n) moltiplicato per il numero di elementi per pagina (\nsempre fisso a 30\n) \u00e8 minore degli elementi totali.\n\n  Se lo \u00e8, permette il passaggio alla pagina successiva, altrimenti, disabilita il bottone \u201c\n>\n\u201d.  \n\n\n'next': function () {\n    if((this.skip + 1) * this.limit < this.count) {\n        this.$emit('next')\n    }\n},\n\n\n\n\n\n\nIl metodo \nprev()\n:\n\n\nrichiama una funzione che controlla se il numero di \nskip\n (\npassaggi alla pagina successiva\n) \u00e8 maggiore di zero. Se lo \u00e8, vuol dire che si \u00e8 su una pagina successiva alla prima e, quindi, \u00e8 possibile tornare indietro; altrimenti viene disabilitato il bottone \u201c\n<\n\u201d.  \n\n\n'prev': function () {\n    if (this.skip > 0) {\n        this.$emit('prev')\n    }\n}",
            "title": "result"
        },
        {
            "location": "/result/#result",
            "text": "",
            "title": "Result"
        },
        {
            "location": "/result/#il-metodo-next",
            "text": "richiama una funzione che controlla se il numero di  skip  ( passaggi alla pagina successiva ) moltiplicato per il numero di elementi per pagina ( sempre fisso a 30 ) \u00e8 minore degli elementi totali. \n  Se lo \u00e8, permette il passaggio alla pagina successiva, altrimenti, disabilita il bottone \u201c > \u201d.    'next': function () {\n    if((this.skip + 1) * this.limit < this.count) {\n        this.$emit('next')\n    }\n},",
            "title": "Il metodo next():"
        },
        {
            "location": "/result/#il-metodo-prev",
            "text": "richiama una funzione che controlla se il numero di  skip  ( passaggi alla pagina successiva ) \u00e8 maggiore di zero. Se lo \u00e8, vuol dire che si \u00e8 su una pagina successiva alla prima e, quindi, \u00e8 possibile tornare indietro; altrimenti viene disabilitato il bottone \u201c < \u201d.    'prev': function () {\n    if (this.skip > 0) {\n        this.$emit('prev')\n    }\n}",
            "title": "Il metodo prev():"
        },
        {
            "location": "/searchbar/",
            "text": "Searchbar\n\n\n\n\n\n\n\n\u00c8 la barra di ricerca presente in ogni pagina del men\u00f9 a 8 voci.  \n\n\n\n\nNel metodo della searchbar vengono richiamate due funzioni:  \n\n\nupdateTags()\n:\n\n\nLa prima, \nupdateTags()\n, prende in input, come parametro, i \ntags\n inseriti manualmente dalla barra di ricerca e li immette nella \nqueryTags\n.  \n\n\n'methods': {\n    'updateTags': function (tags) {\n        this.$emit('updateTags', tags)\n    },\n\n\n\n\nupdateTags (tags) {\n    this.queryTags = tags\n    this.aggiornaQuery()\n},\n\n\n\n\n\n\nselectedSort()\n:\n\n\nLa seconda, \nselectedSort()\n, prende in input \nvalue\n, come parametro, il quale verr\u00e0 richiamato dalla funzione \nupdateSort()\n che controller\u00e0 se l\u2019opzione (\noption\n), passata come parametro, e il valore corrente dell\u2019ordinamento (\nvalue\n) sono diversi dal valore dell\u2019opzione; in questo caso dar\u00e0 all\u2019ordinamento correnta il valore dell\u2019opzione.  \n\n\n'selectedSort': function (value) {\n    this.$emit('updateSort', value)\n}\n\n\n\n\nupdateSort (option) {\n    if (option && this.orderBy.currentSort.value !== option.value) {\n        this.orderBy.currentSort = option\n        this.aggiornaQuery()\n    }\n},",
            "title": "searchbar"
        },
        {
            "location": "/searchbar/#searchbar",
            "text": "",
            "title": "Searchbar"
        },
        {
            "location": "/searchbar/#updatetags",
            "text": "La prima,  updateTags() , prende in input, come parametro, i  tags  inseriti manualmente dalla barra di ricerca e li immette nella  queryTags .    'methods': {\n    'updateTags': function (tags) {\n        this.$emit('updateTags', tags)\n    },  updateTags (tags) {\n    this.queryTags = tags\n    this.aggiornaQuery()\n},",
            "title": "updateTags():"
        },
        {
            "location": "/searchbar/#selectedsort",
            "text": "La seconda,  selectedSort() , prende in input  value , come parametro, il quale verr\u00e0 richiamato dalla funzione  updateSort()  che controller\u00e0 se l\u2019opzione ( option ), passata come parametro, e il valore corrente dell\u2019ordinamento ( value ) sono diversi dal valore dell\u2019opzione; in questo caso dar\u00e0 all\u2019ordinamento correnta il valore dell\u2019opzione.    'selectedSort': function (value) {\n    this.$emit('updateSort', value)\n}  updateSort (option) {\n    if (option && this.orderBy.currentSort.value !== option.value) {\n        this.orderBy.currentSort = option\n        this.aggiornaQuery()\n    }\n},",
            "title": "selectedSort():"
        },
        {
            "location": "/metadati/",
            "text": "Metadati\n\n\n\n\n\n\n\n\n\n\u00c8 un contenitore per la descrizione (lista di metadati, importata dal componente \nmetadatilist\n), all'interno del dettaglio di un elemento.  \n\n\n\n\n\n\n\n\nRichiama i componenti: \nmetadataService\n e \nmetadatilist\n.  \n\n\n\n\nimport MetaDataService from './metadataService'\nimport AuiMetaDatiList from './metadatalist/metadatilist.vue'\n\n\n\n\n\n\n\n\nPrende in input le propriet\u00e0 \nmetadati\n, \nsummary\n e \nschedaBreve\n.  \n\n\n\n\nprops: [\n    'metadati',\n    'summary',\n    'schedaBreve'\n],\n\n\n\n\n\n\n\n\nIn \nmetadati\n verr\u00e0 importata, nel codice \n.html\n, la lista di metadati (\nmetadatiList\n) attraverso la libreria \n<aui-meta-dati-list>\n.  \n\n\n\n\n<div>\n    <aui-meta-dati-list :data=\"metadatiList\"></aui-meta-dati-list>\n</div>\n\n\n\n\n\n\nIl metodo data():\n\n\ndata() {\nconst metService = new MetaDataService(this.metadati)\nlet tempMetadata = metService.clearEmptyMetadata().formatMetadati()\n\nreturn {\n    metadatiList: tempMetadata.reduceForSummary(this.summary)\n  }\n}\n\n\n\n\n\n1. Ritorna la variabile \nmetadatiList\n.\n\n\n\n\n\n2. Passa, come parametro, alla classe \nMetaDataService\n i \nmetadati\n  e assegna il valore ritornato alla variabile \ncostante\n  \nmetService\n.  \n\n\n\n\n\n3. Alla variabile \nmetService\n vengono applicati i metodi, del sub-componente \nmetadataService\n, \nclearEmptyMetadata()\n e \nformatMetadati()\n e, il valore ritornato viene assegnato alla variabile \ntempMetadata\n.\n\n\n\n\n\n4. Alla variabile \ntempMetadata\n viene applicato il metodo, del sub-componente \nmetadataService\n, \nreduceForSummary()\n a cui viene passato il parametro summary e, il valore ritornato viene assegnato alla variabile \nmetadatiList\n.",
            "title": "metadati"
        },
        {
            "location": "/metadati/#metadati",
            "text": "",
            "title": "Metadati"
        },
        {
            "location": "/metadati/#il-metodo-data",
            "text": "data() {\nconst metService = new MetaDataService(this.metadati)\nlet tempMetadata = metService.clearEmptyMetadata().formatMetadati()\n\nreturn {\n    metadatiList: tempMetadata.reduceForSummary(this.summary)\n  }\n}  \n1. Ritorna la variabile  metadatiList .  \n2. Passa, come parametro, alla classe  MetaDataService  i  metadati   e assegna il valore ritornato alla variabile  costante    metService .    \n3. Alla variabile  metService  vengono applicati i metodi, del sub-componente  metadataService ,  clearEmptyMetadata()  e  formatMetadati()  e, il valore ritornato viene assegnato alla variabile  tempMetadata .  \n4. Alla variabile  tempMetadata  viene applicato il metodo, del sub-componente  metadataService ,  reduceForSummary()  a cui viene passato il parametro summary e, il valore ritornato viene assegnato alla variabile  metadatiList .",
            "title": "Il metodo data():"
        },
        {
            "location": "/metadataService/",
            "text": "MetadataService\n\n\n\n\n\n\n\n\n\n\u00c8 una classe che consente di gestire, attraverso diversi metodi, i metadati che verrano poi restituiti al componente \nmetadati\n.\n\n\n\n\n\n\nLa classe MetadataService { }:\n\n\ncontiene tutti i metodi che verranno utilizzati dal componente \nmetadati\n.\n\n\nexport default class MetadataService {...}\n\n\n\n\n\n\nIl metodo constructor():\n\n\n\u00e8 il costruttore che, riceve come parametro i metadati e li assegna ad una variabile della classe col medesimo nome.\n\n\nconstructor (metadati) {\n    this.metadati = metadati\n}\n\n\n\n\n\n\nIl metodo value():\n\n\nritorna i metadati passati al costruttore.\n\n\nvalue() {\n    return this.metadati\n}\n\n\n\n\n\n\nIl metodo clearEmptyMetadata():\n\n\ncontrolla se l'oggertto metadati \u00e8 vuoto (\n_recursiveCheckEmpty\n), copia i valori presenti in metadati (\nObject.assign\n) e li assegna alla variabile costante \nclearMetadata\n.\n\nRitorna una nuova \nMetadataService\n con in nuovo oggetto senza metadati vuoti (\nclearMetadata\n).\n\n\nclearEmptyMetadata() {\n    const clearMetadata = Object.assign({}, this._recursiveCheckEmpty(this.metadati))\n    return new MetadataService(clearMetadata)\n}\n\n\n\n\n\n\nIl metodo formatMetadati():\n\n\npermette, se richiamato, di \nformattare\n i metadati. Restituisce alla variabile \nresult\n il risultato, \nitem\n, della funzione\n_\n\nPer ogni item verr\u00e0 assegnato \n*true*\n alla propriet\u00e0 \nvisible\n e \ncode\n alla propriet\u00e0 \nfieldCode\n.\n\nAggiunge a \nitem.plainsubElement\n Crea una catena di sotto metadati \n\n\nAggiunge a \nitem.plainsubElement\n una catena di sottometadati, mettendoli dentro un array contenente il loro 'valore' primario, viene compattato e ogni 'submetadato' viene diviso dalla stringa (' - '), infine, viene riportato il valore finale \n.value()\n.\nInoltre, con la funzione \n.replace()\n rimpiazzer\u00e0, appunto, tutti i caratteri con cui viene apportato 'il riporto a capo' dei vari sistemi operativi, con il tag \n<br/>\n.\ninfine, ritorna l'oggetto \nitem\n\n\nformatMetadati() {\n    const result = _.map(this.metadati, (item, code) => {\n        item.visible = true\n        item.fieldCode = code\n        item.plainSubElement = _.chain(item.subelement).map('value').compact().join(' - ').value()\n        if (_.isEmpty(item.plainSubElement)) {\n            item.plainSubElement = item.value\n        }\n        item.plainSubElement = item.plainSubElement.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')\n        return item\n    })\n    return new MetadataService(result)\n}\n\n\n\n\n\n\nIl metodo reduceForSummary():\n\n\nAdatta il metadato al formato del \nsummary\n, per esserci poi inserito \nLa funzione reduce aggiunge all'array vuoto summary\n\n\nRiempie un array, inizialmente vuoto, con i valori ridotti dell'oggetto \nsummary\n con il codice (\ncode\n) ricercato tramite \n.find()\n,  troveremo quindi, l'array con i valori di \nlabel\n, \nmetadati\n, e \nvisible\n, viene poi restituito tutto il metadato addattato con la funzione\n.value()\n.\n\n\nreduceForSummary(summary) {\n    return _.chain(summary)\n    .reduce((memo, code) => {\n        const item = this.find(code)\n        if (item) {\n            memo.push(item)\n        }\n        return memo\n    }, [])\n    .map((value, key) => {\n        return {\n            label: value.label,\n            metadati: value,\n            visible: _.some(value, 'visible')\n        }\n    })\n    .value()\n}\n\n\n\n\n\n\nIl metodo reduceForSchedaBreve():\n\n\nAdatta il metadato al formato della \nscheda breve\n, per esserci poi inserito \n\n\nRiempie un array, inizialmente vuoto, con i valori ridotti dell'oggetto \nschedabreve\n con il codice (\ncode\n) ricercato tramite \n.find()\n, avremmo infine, il vettore con i vecchi contenuti di \nschedabreve\n \nridotti\n con la funzione \n.reduce()\n.\n\n\n reduceForSchedaBreve (schedabreve) {\n    return schedabreve.reduce((old, code) => {\n        old[code] = this.find(code)\n        return old\n    }, {})\n }\n\n\n\n\n\n\nIl metodo find():\n\n\nRicerca un metadato specifico all'interno della lista di metadati.\n\n\nfind (elementCode) {\n    return this.metadati[elementCode] ? this.metadati[elementCode] : this.metadati.find(item => item.fieldCode === elementCode)\n}",
            "title": "metadataService"
        },
        {
            "location": "/metadataService/#metadataservice",
            "text": "",
            "title": "MetadataService"
        },
        {
            "location": "/metadataService/#la-classe-metadataservice",
            "text": "contiene tutti i metodi che verranno utilizzati dal componente  metadati .  export default class MetadataService {...}",
            "title": "La classe MetadataService { }:"
        },
        {
            "location": "/metadataService/#il-metodo-constructor",
            "text": "\u00e8 il costruttore che, riceve come parametro i metadati e li assegna ad una variabile della classe col medesimo nome.  constructor (metadati) {\n    this.metadati = metadati\n}",
            "title": "Il metodo constructor():"
        },
        {
            "location": "/metadataService/#il-metodo-value",
            "text": "ritorna i metadati passati al costruttore.  value() {\n    return this.metadati\n}",
            "title": "Il metodo value():"
        },
        {
            "location": "/metadataService/#il-metodo-clearemptymetadata",
            "text": "controlla se l'oggertto metadati \u00e8 vuoto ( _recursiveCheckEmpty ), copia i valori presenti in metadati ( Object.assign ) e li assegna alla variabile costante  clearMetadata . \nRitorna una nuova  MetadataService  con in nuovo oggetto senza metadati vuoti ( clearMetadata ).  clearEmptyMetadata() {\n    const clearMetadata = Object.assign({}, this._recursiveCheckEmpty(this.metadati))\n    return new MetadataService(clearMetadata)\n}",
            "title": "Il metodo clearEmptyMetadata():"
        },
        {
            "location": "/metadataService/#il-metodo-formatmetadati",
            "text": "permette, se richiamato, di  formattare  i metadati. Restituisce alla variabile  result  il risultato,  item , della funzione _ \nPer ogni item verr\u00e0 assegnato  *true*  alla propriet\u00e0  visible  e  code  alla propriet\u00e0  fieldCode . \nAggiunge a  item.plainsubElement  Crea una catena di sotto metadati   Aggiunge a  item.plainsubElement  una catena di sottometadati, mettendoli dentro un array contenente il loro 'valore' primario, viene compattato e ogni 'submetadato' viene diviso dalla stringa (' - '), infine, viene riportato il valore finale  .value() .\nInoltre, con la funzione  .replace()  rimpiazzer\u00e0, appunto, tutti i caratteri con cui viene apportato 'il riporto a capo' dei vari sistemi operativi, con il tag  <br/> .\ninfine, ritorna l'oggetto  item  formatMetadati() {\n    const result = _.map(this.metadati, (item, code) => {\n        item.visible = true\n        item.fieldCode = code\n        item.plainSubElement = _.chain(item.subelement).map('value').compact().join(' - ').value()\n        if (_.isEmpty(item.plainSubElement)) {\n            item.plainSubElement = item.value\n        }\n        item.plainSubElement = item.plainSubElement.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')\n        return item\n    })\n    return new MetadataService(result)\n}",
            "title": "Il metodo formatMetadati():"
        },
        {
            "location": "/metadataService/#il-metodo-reduceforsummary",
            "text": "Adatta il metadato al formato del  summary , per esserci poi inserito \nLa funzione reduce aggiunge all'array vuoto summary  Riempie un array, inizialmente vuoto, con i valori ridotti dell'oggetto  summary  con il codice ( code ) ricercato tramite  .find() ,  troveremo quindi, l'array con i valori di  label ,  metadati , e  visible , viene poi restituito tutto il metadato addattato con la funzione .value() .  reduceForSummary(summary) {\n    return _.chain(summary)\n    .reduce((memo, code) => {\n        const item = this.find(code)\n        if (item) {\n            memo.push(item)\n        }\n        return memo\n    }, [])\n    .map((value, key) => {\n        return {\n            label: value.label,\n            metadati: value,\n            visible: _.some(value, 'visible')\n        }\n    })\n    .value()\n}",
            "title": "Il metodo reduceForSummary():"
        },
        {
            "location": "/metadataService/#il-metodo-reduceforschedabreve",
            "text": "Adatta il metadato al formato della  scheda breve , per esserci poi inserito   Riempie un array, inizialmente vuoto, con i valori ridotti dell'oggetto  schedabreve  con il codice ( code ) ricercato tramite  .find() , avremmo infine, il vettore con i vecchi contenuti di  schedabreve   ridotti  con la funzione  .reduce() .   reduceForSchedaBreve (schedabreve) {\n    return schedabreve.reduce((old, code) => {\n        old[code] = this.find(code)\n        return old\n    }, {})\n }",
            "title": "Il metodo reduceForSchedaBreve():"
        },
        {
            "location": "/metadataService/#il-metodo-find",
            "text": "Ricerca un metadato specifico all'interno della lista di metadati.  find (elementCode) {\n    return this.metadati[elementCode] ? this.metadati[elementCode] : this.metadati.find(item => item.fieldCode === elementCode)\n}",
            "title": "Il metodo find():"
        },
        {
            "location": "/metadatilist/",
            "text": "Metadatilist\n\n\n\n\n\n\n\n\n\n\u00c8 una classe \nhtml\n \nclass=\"metadatilist\"\n che serve a contenere una descrizione, lista di metadati, all'interno del dettaglio di un elemento.  \n\n\n\n\n\n\n\n\n\n\n\n\nPrende in input solo la propriet\u00e0 \ndata\n.  \n\n\n\n\nprops: [\n    'data'\n]",
            "title": "metadatilist"
        },
        {
            "location": "/metadatilist/#metadatilist",
            "text": "",
            "title": "Metadatilist"
        },
        {
            "location": "/related/",
            "text": "Related\n\n\n\n\n\n\n\n\n\n\u00c8 una classe \nhtml\n \nclass=\"related row\"\n che contiene, sotto forma di \"\ncard\n\" con preview o di elenco, tutte le opere, le immagini, i video, l'autore... collegate tramite una relazione a un elemento.  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRichiama il componente: \ncard-view\n.  \n\n\n\n\nimport AuiCard from '~/components/item-view/card-view/card.vue'\n\n\n\n\n\n\n\n\nPrende in input le propriet\u00e0 \nrelateds\n e \nview\n.  \n\n\n\n\nprops: [\n    'relateds',\n    'view'\n]",
            "title": "related"
        },
        {
            "location": "/related/#related",
            "text": "",
            "title": "Related"
        },
        {
            "location": "/spettacoliview/",
            "text": "Spettacoli-view\n\n\n\n\n\n\n\n\n\n\u00c8 la pagina del dettaglio per gli spettacoli (\n es. produzioni\n).  \n\n\n\n\n\n\n\n\nLa pagina \u00e8 composta da: il titolo con una classe \nhtml\n (\nclass=\"titolo-foglia white\"\n) , i \nmetadati\n, le \nrelazioni\n e da una \nlocandina\n per quell'elemento.  \n\n\n\n\n\n\n\n\nLa locandina verr\u00e0 importata, nel codice \n.html\n, attraverso la libreria \n<aui-locandina>\n:  \n\n\n\n\n<aui-locandina :relateds=\"relateds\" class=\"pb-2 d-none d-md-block\"></aui-locandina>\n\n\n\n\n\n\n\n\nRichiama i componenti: \nmetadati\n, \nrelated\n e \nlocandina\n.  \n\n\n\n\nimport AuiMetadati from '../metadati/metadati.vue'\nimport AuiRelated from '../related/related.vue'\nimport AuiLocandina from '../locandina/locandina.vue'\n\n\n\n\n\n\n\n\nPrende in input le propriet\u00e0 \nitems\n e \nrelateds\n.  \n\n\n\n\nprops: [\n    'items',\n    'relateds'\n],\n\n\n\n\nIl metodo \nrelSplitted()\n:\n\n\nriprende le propriet\u00e0 dell\u2019elemento e divide le entit\u00e0 (\nitems\n) dalle relazioni (\nrelateds\n), permettendo di modificare separatamente gli elementi senza che vi siano modifiche anche nelle loro relazioni.  \n\n\nrelSplitted () {\n    return util.splitRelation(this.relateds)\n}",
            "title": "spettacoli-view"
        },
        {
            "location": "/spettacoliview/#spettacoli-view",
            "text": "",
            "title": "Spettacoli-view"
        },
        {
            "location": "/spettacoliview/#il-metodo-relsplitted",
            "text": "riprende le propriet\u00e0 dell\u2019elemento e divide le entit\u00e0 ( items ) dalle relazioni ( relateds ), permettendo di modificare separatamente gli elementi senza che vi siano modifiche anche nelle loro relazioni.    relSplitted () {\n    return util.splitRelation(this.relateds)\n}",
            "title": "Il metodo relSplitted():"
        },
        {
            "location": "/locandina/",
            "text": "Locandina\n\n\n\n\n\n\n\n\n\n\u00c8 un contenitore per l'\nimmagine della locandina\n dello spettacolo.  \n\n\n\n\n\n\n\n\nPrende in input solo la propriet\u00e0 \nrelateds\n.  \n\n\n\n\nprops: [\n    'relateds'\n],\n\n\n\n\n\n\n\n\nPrende l'array contenente tutte le relazioni (\n_.chain(this.relateds)\n), categorizzate come \"\nca/objects\n\", \u00e8 ritorna il primo (\n.head()\n) elemento di tipo \"\nManifesti e locandine\n\".  \n\n\n\n\ncomputed: {\n    locandina () {\n        return _.chain(this.relateds).get('ca/objects').filter(item => item.type === 'Manifesti e locandine').head().value()\n    }\n}\n\n\n\n\n\n\n\n\nAttraverso il codice \n.html\n viene posta l'immagine della locandina ottenuta all'interno di un contenitore (\ndiv-wrapper\n).  \n\n\n\n\n<div v-if=\"locandina\" class=\"locandina_wrapper\">\n    <img :src=\"locandina.img.url.mediumlarge\">\n</div>",
            "title": "locandina"
        },
        {
            "location": "/locandina/#locandina",
            "text": "",
            "title": "Locandina"
        },
        {
            "location": "/cardview/",
            "text": "Card-view\n\n\n\n\n\n\n\nSono gli elementi mostrati in formato \"\ncard\n\".  \n\n\n\n\nImporta il componente: \npreview\n.  \n\n\nimport AuiPreview from '~/component/preview/preview.vue'\n\n\n\n\n\n\nPrende in input alcune propriet\u00e0 e ci restituir\u00e0 un vettore di immagini.  \n\n\nprops: [\n    'title',\n    'imgUrl',\n    'category',\n    'type',\n    'link',\n    'id',\n    'table',\n    'preview'\n],\n\n\n\n\ndata (){\n    return {\n        'images': []\n    }\n},\n\n\n\n\n\n\nPrende in input la propriet\u00e0 \nimgUrl\n e, facendo dei controlli, imposter\u00e0 la grandezza dell\u2019immagine della card: se l\u2019url dell\u2019immagine \u00e8 una stringa (\n_.isString\n) e se non \u00e8 vuoto (\" \"), allora l'immagine avr\u00e0 la sua normale grandezza; se l\u2019url dell\u2019immagine e l\u2019immagine medio-larga non sono null, indefinito o di lunghezza = 0, allora l\u2019immagine avr\u00e0 una grandezza medio-larga; altrimenti ancora, sar\u00e0 un\u2019icona.  \n\n\ncomputed: {\n    backImg: function (){\n        let img = {'thumb': '', 'medium': ''}\n        if (_isString(this.imgUrl) && this.imgUrl !== ''){\n            img = {'thumb': this.imgUrl, 'medium': this.imgUrl}\n        }else if (!_.isEmpty(this.imgUrl) && !_.isEmpty(this.imgUrl.mediumlarge)){\n            img = {'thumb': this.imgUrl.thumbnail, 'medium': this.imgUrl.mediumlarge}\n            }else{\n            let icon = util.getIcon(this.table, this.type)\n            img = {'thumb': icon, 'medium': icon}\n        }\n        return img\n    }\n},\n\n\n\n\n\n\nRestituisce l\u2019immagine della card (\nbackImg.medium\n) che avr\u00e0, grazie al codice \n.html\n, essa stessa come sfondo sfocato (\ncard_img_blurred_bg\n), e che al click ci mostrer\u00e0 la preview delle immagini (\n@click.prevent=\u201dgetPreview\u201d\n).  \n\n\n<clazy-load :src=\"backImg.medium\">\n\n\n\n\n<div class=\"card_img_blurred_bg\" :style=\"{ backgroundImage: 'url(' + backImg.medium + ')' }\"></div>\n<img :src=\"backImg.medium\" :alt=\"title\" @click.prevent=\"getPreview\">\n\n\n\n\n\n\nIl metodo \ngetPreview()\n:\n\n\nprende in input la propriet\u00e0 \npreview\n e controlla: se non \u00e8 una preview, rimanda direttamente al link senza ricaricare tutta la pagina (\n.push(this.link)\n), altrimenti manda allo \nstore\n le azioni del metodo \ngetDetail()\n (dettaglio e identificativo) e restituisce alle immagini (\nimages\n) un URL di media larghezza e un titolo.  \n\n\nasync getPreview () {\n    if (!this.preview) {\n        this.$router.push(this.link)\n    } else {\n        let detail = await this.$store.dispatch('detail/getDetail', {table: this.table, id: this.id})\n        if (detail.representations) {\n            this.images = _.map(detail.representations, e => {\n                return {\n                    'url': e.url.mediumlarge,\n                    'title'; e.title\n                }\n            })\n        }\n\n\n\n\n\n\nInfine controlla se i metadati sono quelli di un video, in quel caso mette l\u2019URL del video nelle immagini (\nimages\n).  \n\n\nif (!_.isEmpty(detail.metadati) && !_.isEmpty(detail.metadati.external_link)) {\n    this.images.push({'url': detail.metadati.external_link.subelement.url_entry.value})\n}",
            "title": "card-view"
        },
        {
            "location": "/cardview/#card-view",
            "text": "",
            "title": "Card-view"
        },
        {
            "location": "/cardview/#il-metodo-getpreview",
            "text": "prende in input la propriet\u00e0  preview  e controlla: se non \u00e8 una preview, rimanda direttamente al link senza ricaricare tutta la pagina ( .push(this.link) ), altrimenti manda allo  store  le azioni del metodo  getDetail()  (dettaglio e identificativo) e restituisce alle immagini ( images ) un URL di media larghezza e un titolo.    async getPreview () {\n    if (!this.preview) {\n        this.$router.push(this.link)\n    } else {\n        let detail = await this.$store.dispatch('detail/getDetail', {table: this.table, id: this.id})\n        if (detail.representations) {\n            this.images = _.map(detail.representations, e => {\n                return {\n                    'url': e.url.mediumlarge,\n                    'title'; e.title\n                }\n            })\n        }",
            "title": "Il metodo getPreview():"
        },
        {
            "location": "/listview/",
            "text": "List-view\n\n\n\n\n\n\n\nSono gli elementi mostrati in formato \"\nelenco\n\".  \n\n\n\n\nUtilizza le propriet\u00e0: \ntitle\n, \ntype\n e \nlink\n, dichiarate nel file \n.js\n, per visualizzare gli elementi sotto forma di \nelenco\n nel file \n.html\n.  \n\n\nexport default{\n    props: [\n        'title',\n        'type',\n        'link'\n    ]\n}\n\n\n\n\n\n\nTutti gli elementi dell\u2019elenco sono contenuti in un \ncontenitore\n (\n<div class=\u201dlist\u201d>\n).  \n\n\n<div class=\"list\">\n\n\n\n\n\n\nOgni elemento sar\u00e0 un link che riporter\u00e0 il titolo della pagina a cui esso ricollega.  \n\n\n<nuxt-link v-html=\"title\" :to=\"link\" class=\"primary-color\"></div>nuxt-link>",
            "title": "list-view"
        },
        {
            "location": "/listview/#list-view",
            "text": "",
            "title": "List-view"
        }
    ]
}